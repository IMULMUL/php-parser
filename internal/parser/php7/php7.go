// line internal/parser/php7/php7.y:2
package php7

import __yyfmt__ "fmt"

// line internal/parser/php7/php7.y:2
import (
	"bytes"
	"strconv"

	"github.com/z7zmey/php-parser/internal/scanner"
	"github.com/z7zmey/php-parser/pkg/ast"
)

// line internal/parser/php7/php7.y:14
type yySymType struct {
	yys   int
	node  ast.Node
	token *scanner.Token
}

const T_INCLUDE = 57346
const T_INCLUDE_ONCE = 57347
const T_EXIT = 57348
const T_IF = 57349
const T_LNUMBER = 57350
const T_DNUMBER = 57351
const T_STRING = 57352
const T_STRING_VARNAME = 57353
const T_VARIABLE = 57354
const T_NUM_STRING = 57355
const T_INLINE_HTML = 57356
const T_CHARACTER = 57357
const T_BAD_CHARACTER = 57358
const T_ENCAPSED_AND_WHITESPACE = 57359
const T_CONSTANT_ENCAPSED_STRING = 57360
const T_ECHO = 57361
const T_DO = 57362
const T_WHILE = 57363
const T_ENDWHILE = 57364
const T_FOR = 57365
const T_ENDFOR = 57366
const T_FOREACH = 57367
const T_ENDFOREACH = 57368
const T_DECLARE = 57369
const T_ENDDECLARE = 57370
const T_AS = 57371
const T_SWITCH = 57372
const T_ENDSWITCH = 57373
const T_CASE = 57374
const T_DEFAULT = 57375
const T_BREAK = 57376
const T_CONTINUE = 57377
const T_GOTO = 57378
const T_FUNCTION = 57379
const T_CONST = 57380
const T_RETURN = 57381
const T_TRY = 57382
const T_CATCH = 57383
const T_FINALLY = 57384
const T_THROW = 57385
const T_USE = 57386
const T_INSTEADOF = 57387
const T_GLOBAL = 57388
const T_VAR = 57389
const T_UNSET = 57390
const T_ISSET = 57391
const T_EMPTY = 57392
const T_HALT_COMPILER = 57393
const T_CLASS = 57394
const T_TRAIT = 57395
const T_INTERFACE = 57396
const T_EXTENDS = 57397
const T_IMPLEMENTS = 57398
const T_OBJECT_OPERATOR = 57399
const T_DOUBLE_ARROW = 57400
const T_LIST = 57401
const T_ARRAY = 57402
const T_CALLABLE = 57403
const T_CLASS_C = 57404
const T_TRAIT_C = 57405
const T_METHOD_C = 57406
const T_FUNC_C = 57407
const T_LINE = 57408
const T_FILE = 57409
const T_COMMENT = 57410
const T_DOC_COMMENT = 57411
const T_OPEN_TAG = 57412
const T_OPEN_TAG_WITH_ECHO = 57413
const T_CLOSE_TAG = 57414
const T_WHITESPACE = 57415
const T_START_HEREDOC = 57416
const T_END_HEREDOC = 57417
const T_DOLLAR_OPEN_CURLY_BRACES = 57418
const T_CURLY_OPEN = 57419
const T_PAAMAYIM_NEKUDOTAYIM = 57420
const T_NAMESPACE = 57421
const T_NS_C = 57422
const T_DIR = 57423
const T_NS_SEPARATOR = 57424
const T_ELLIPSIS = 57425
const T_EVAL = 57426
const T_REQUIRE = 57427
const T_REQUIRE_ONCE = 57428
const T_LOGICAL_OR = 57429
const T_LOGICAL_XOR = 57430
const T_LOGICAL_AND = 57431
const T_INSTANCEOF = 57432
const T_NEW = 57433
const T_CLONE = 57434
const T_ELSEIF = 57435
const T_ELSE = 57436
const T_ENDIF = 57437
const T_PRINT = 57438
const T_YIELD = 57439
const T_STATIC = 57440
const T_ABSTRACT = 57441
const T_FINAL = 57442
const T_PRIVATE = 57443
const T_PROTECTED = 57444
const T_PUBLIC = 57445
const T_INC = 57446
const T_DEC = 57447
const T_YIELD_FROM = 57448
const T_INT_CAST = 57449
const T_DOUBLE_CAST = 57450
const T_STRING_CAST = 57451
const T_ARRAY_CAST = 57452
const T_OBJECT_CAST = 57453
const T_BOOL_CAST = 57454
const T_UNSET_CAST = 57455
const T_COALESCE = 57456
const T_SPACESHIP = 57457
const T_NOELSE = 57458
const T_PLUS_EQUAL = 57459
const T_MINUS_EQUAL = 57460
const T_MUL_EQUAL = 57461
const T_POW_EQUAL = 57462
const T_DIV_EQUAL = 57463
const T_CONCAT_EQUAL = 57464
const T_MOD_EQUAL = 57465
const T_AND_EQUAL = 57466
const T_OR_EQUAL = 57467
const T_XOR_EQUAL = 57468
const T_SL_EQUAL = 57469
const T_SR_EQUAL = 57470
const T_BOOLEAN_OR = 57471
const T_BOOLEAN_AND = 57472
const T_POW = 57473
const T_SL = 57474
const T_SR = 57475
const T_IS_IDENTICAL = 57476
const T_IS_NOT_IDENTICAL = 57477
const T_IS_EQUAL = 57478
const T_IS_NOT_EQUAL = 57479
const T_IS_SMALLER_OR_EQUAL = 57480
const T_IS_GREATER_OR_EQUAL = 57481

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_INCLUDE",
	"T_INCLUDE_ONCE",
	"T_EXIT",
	"T_IF",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_STRING",
	"T_STRING_VARNAME",
	"T_VARIABLE",
	"T_NUM_STRING",
	"T_INLINE_HTML",
	"T_CHARACTER",
	"T_BAD_CHARACTER",
	"T_ENCAPSED_AND_WHITESPACE",
	"T_CONSTANT_ENCAPSED_STRING",
	"T_ECHO",
	"T_DO",
	"T_WHILE",
	"T_ENDWHILE",
	"T_FOR",
	"T_ENDFOR",
	"T_FOREACH",
	"T_ENDFOREACH",
	"T_DECLARE",
	"T_ENDDECLARE",
	"T_AS",
	"T_SWITCH",
	"T_ENDSWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_BREAK",
	"T_CONTINUE",
	"T_GOTO",
	"T_FUNCTION",
	"T_CONST",
	"T_RETURN",
	"T_TRY",
	"T_CATCH",
	"T_FINALLY",
	"T_THROW",
	"T_USE",
	"T_INSTEADOF",
	"T_GLOBAL",
	"T_VAR",
	"T_UNSET",
	"T_ISSET",
	"T_EMPTY",
	"T_HALT_COMPILER",
	"T_CLASS",
	"T_TRAIT",
	"T_INTERFACE",
	"T_EXTENDS",
	"T_IMPLEMENTS",
	"T_OBJECT_OPERATOR",
	"T_DOUBLE_ARROW",
	"T_LIST",
	"T_ARRAY",
	"T_CALLABLE",
	"T_CLASS_C",
	"T_TRAIT_C",
	"T_METHOD_C",
	"T_FUNC_C",
	"T_LINE",
	"T_FILE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_OPEN_TAG",
	"T_OPEN_TAG_WITH_ECHO",
	"T_CLOSE_TAG",
	"T_WHITESPACE",
	"T_START_HEREDOC",
	"T_END_HEREDOC",
	"T_DOLLAR_OPEN_CURLY_BRACES",
	"T_CURLY_OPEN",
	"T_PAAMAYIM_NEKUDOTAYIM",
	"T_NAMESPACE",
	"T_NS_C",
	"T_DIR",
	"T_NS_SEPARATOR",
	"T_ELLIPSIS",
	"T_EVAL",
	"T_REQUIRE",
	"T_REQUIRE_ONCE",
	"T_LOGICAL_OR",
	"T_LOGICAL_XOR",
	"T_LOGICAL_AND",
	"T_INSTANCEOF",
	"T_NEW",
	"T_CLONE",
	"T_ELSEIF",
	"T_ELSE",
	"T_ENDIF",
	"T_PRINT",
	"T_YIELD",
	"T_STATIC",
	"T_ABSTRACT",
	"T_FINAL",
	"T_PRIVATE",
	"T_PROTECTED",
	"T_PUBLIC",
	"T_INC",
	"T_DEC",
	"T_YIELD_FROM",
	"T_INT_CAST",
	"T_DOUBLE_CAST",
	"T_STRING_CAST",
	"T_ARRAY_CAST",
	"T_OBJECT_CAST",
	"T_BOOL_CAST",
	"T_UNSET_CAST",
	"T_COALESCE",
	"T_SPACESHIP",
	"T_NOELSE",
	"T_PLUS_EQUAL",
	"T_MINUS_EQUAL",
	"T_MUL_EQUAL",
	"T_POW_EQUAL",
	"T_DIV_EQUAL",
	"T_CONCAT_EQUAL",
	"T_MOD_EQUAL",
	"T_AND_EQUAL",
	"T_OR_EQUAL",
	"T_XOR_EQUAL",
	"T_SL_EQUAL",
	"T_SR_EQUAL",
	"T_BOOLEAN_OR",
	"T_BOOLEAN_AND",
	"T_POW",
	"T_SL",
	"T_SR",
	"T_IS_IDENTICAL",
	"T_IS_NOT_IDENTICAL",
	"T_IS_EQUAL",
	"T_IS_NOT_EQUAL",
	"T_IS_SMALLER_OR_EQUAL",
	"T_IS_GREATER_OR_EQUAL",
	"'\"'",
	"'`'",
	"'{'",
	"'}'",
	"';'",
	"':'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'?'",
	"'&'",
	"'-'",
	"'+'",
	"'!'",
	"'~'",
	"'@'",
	"'$'",
	"','",
	"'|'",
	"'='",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'<'",
	"'>'",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

// line internal/parser/php7/php7.y:8008

// line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	-2, 0,
	-1, 44,
	57, 438,
	78, 438,
	142, 438,
	148, 438,
	-2, 433,
	-1, 48,
	146, 441,
	-2, 450,
	-1, 84,
	57, 440,
	78, 440,
	142, 440,
	146, 443,
	148, 440,
	-2, 428,
	-1, 107,
	78, 401,
	-2, 430,
	-1, 229,
	57, 438,
	78, 438,
	142, 438,
	148, 438,
	-2, 328,
	-1, 232,
	146, 443,
	-2, 440,
	-1, 235,
	57, 438,
	78, 438,
	142, 438,
	148, 438,
	-2, 330,
	-1, 354,
	115, 0,
	134, 0,
	135, 0,
	136, 0,
	137, 0,
	-2, 352,
	-1, 355,
	115, 0,
	134, 0,
	135, 0,
	136, 0,
	137, 0,
	-2, 353,
	-1, 356,
	115, 0,
	134, 0,
	135, 0,
	136, 0,
	137, 0,
	-2, 354,
	-1, 357,
	115, 0,
	134, 0,
	135, 0,
	136, 0,
	137, 0,
	-2, 355,
	-1, 358,
	138, 0,
	139, 0,
	165, 0,
	166, 0,
	-2, 356,
	-1, 359,
	138, 0,
	139, 0,
	165, 0,
	166, 0,
	-2, 357,
	-1, 360,
	138, 0,
	139, 0,
	165, 0,
	166, 0,
	-2, 358,
	-1, 361,
	138, 0,
	139, 0,
	165, 0,
	166, 0,
	-2, 359,
	-1, 362,
	115, 0,
	134, 0,
	135, 0,
	136, 0,
	137, 0,
	-2, 360,
	-1, 369,
	147, 169,
	158, 169,
	-2, 438,
	-1, 413,
	147, 479,
	149, 479,
	158, 479,
	-2, 438,
	-1, 417,
	57, 439,
	78, 439,
	142, 439,
	146, 442,
	148, 439,
	-2, 362,
	-1, 431,
	146, 464,
	-2, 431,
	-1, 432,
	146, 466,
	-2, 456,
	-1, 511,
	146, 464,
	-2, 432,
	-1, 512,
	146, 466,
	-2, 457,
	-1, 564,
	147, 107,
	-2, 167,
	-1, 569,
	147, 219,
	-2, 225,
	-1, 594,
	146, 442,
	-2, 439,
	-1, 619,
	147, 107,
	-2, 505,
	-1, 624,
	147, 107,
	-2, 237,
	-1, 652,
	147, 219,
	-2, 225,
	-1, 658,
	147, 189,
	-2, 438,
	-1, 666,
	147, 219,
	-2, 225,
	-1, 692,
	147, 478,
	149, 478,
	158, 478,
	-2, 438,
	-1, 710,
	143, 107,
	-2, 108,
	-1, 727,
	147, 190,
	-2, 438,
	-1, 747,
	12, 276,
	-2, 279,
	-1, 761,
	93, 214,
	94, 214,
	95, 214,
	-2, 0,
	-1, 769,
	143, 107,
	-2, 111,
	-1, 788,
	147, 189,
	-2, 438,
	-1, 790,
	147, 192,
	-2, 412,
	-1, 811,
	93, 215,
	94, 215,
	95, 215,
	-2, 0,
	-1, 863,
	31, 205,
	32, 205,
	33, 205,
	143, 205,
	-2, 0,
	-1, 896,
	29, 76,
	-2, 80,
	-1, 899,
	31, 204,
	32, 204,
	33, 204,
	143, 204,
	-2, 0,
	-1, 931,
	147, 219,
	-2, 225,
}

const yyPrivate = 57344

const yyLast = 7787

var yyAct = [...]int{

	28, 130, 851, 837, 667, 107, 875, 576, 749, 436,
	850, 888, 671, 803, 784, 823, 669, 795, 634, 657,
	680, 706, 138, 138, 138, 313, 563, 151, 5, 376,
	322, 532, 522, 718, 368, 186, 672, 633, 223, 150,
	147, 571, 143, 125, 132, 128, 378, 317, 80, 189,
	9, 405, 316, 225, 228, 8, 84, 236, 237, 238,
	239, 240, 513, 126, 241, 242, 243, 244, 245, 246,
	247, 315, 250, 2, 7, 258, 259, 260, 44, 314,
	264, 430, 6, 127, 884, 878, 868, 221, 689, 273,
	274, 269, 276, 277, 137, 848, 588, 855, 406, 854,
	105, 334, 82, 230, 230, 309, 105, 882, 845, 906,
	541, 232, 232, 682, 566, 335, 254, 140, 141, 514,
	907, 883, 846, 682, 302, 308, 331, 329, 307, 336,
	301, 769, 319, 229, 235, 710, 324, 325, 736, 624,
	332, 330, 308, 619, 302, 564, 105, 554, 411, 190,
	738, 790, 219, 699, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 360, 361, 362,
	111, 364, 366, 321, 370, 269, 306, 372, 266, 695,
	295, 876, 115, 121, 518, 608, 333, 179, 595, 583,
	410, 261, 388, 390, 391, 392, 393, 394, 395, 396,
	397, 398, 399, 400, 401, 519, 424, 402, 138, 404,
	604, 225, 944, 384, 380, 605, 902, 285, 287, 832,
	407, 230, 415, 869, 831, 225, 283, 218, 165, 232,
	821, 937, 931, 217, 117, 106, 105, 812, 794, 783,
	138, 106, 110, 735, 918, 725, 704, 425, 702, 694,
	363, 369, 138, 655, 640, 431, 511, 626, 371, 164,
	166, 167, 523, 524, 79, 230, 525, 179, 598, 517,
	601, 599, 266, 232, 529, 516, 117, 533, 105, 225,
	117, 106, 105, 290, 109, 292, 596, 587, 291, 144,
	299, 840, 792, 305, 728, 413, 230, 423, 409, 693,
	549, 666, 403, 134, 232, 652, 112, 286, 165, 168,
	169, 5, 416, 569, 648, 175, 177, 649, 268, 552,
	877, 520, 233, 825, 824, 559, 427, 550, 414, 163,
	162, 385, 383, 9, 418, 510, 288, 289, 8, 164,
	166, 167, 174, 176, 161, 134, 429, 275, 112, 134,
	270, 272, 112, 558, 306, 271, 562, 7, 538, 420,
	421, 249, 220, 216, 233, 6, 535, 184, 233, 183,
	231, 284, 234, 182, 578, 573, 579, 136, 577, 580,
	581, 106, 135, 131, 113, 420, 838, 421, 421, 420,
	155, 157, 156, 179, 948, 568, 947, 294, 586, 293,
	917, 575, 759, 590, 387, 225, 778, 779, 188, 117,
	600, 901, 864, 833, 570, 827, 820, 181, 178, 607,
	775, 760, 723, 106, 610, 778, 779, 106, 721, 719,
	716, 713, 153, 154, 165, 168, 169, 170, 171, 172,
	173, 175, 177, 553, 270, 540, 537, 825, 824, 179,
	386, 374, 328, 180, 159, 163, 162, 179, 327, 674,
	675, 326, 158, 296, 160, 164, 166, 167, 174, 176,
	161, 543, 858, 117, 819, 815, 813, 771, 134, 536,
	606, 112, 178, 536, 408, 536, 924, 900, 873, 871,
	165, 255, 593, 536, 814, 800, 422, 793, 165, 168,
	169, 170, 171, 172, 173, 175, 177, 138, 614, 179,
	741, 163, 162, 681, 574, 585, 419, 826, 159, 163,
	162, 164, 166, 167, 185, 625, 161, 432, 512, 164,
	166, 167, 174, 176, 161, 165, 777, 120, 618, 191,
	609, 253, 799, 644, 324, 114, 196, 197, 623, 673,
	165, 151, 654, 304, 5, 256, 257, 617, 114, 117,
	615, 198, 200, 199, 117, 676, 289, 642, 577, 639,
	679, 304, 921, 304, 645, 515, 9, 263, 630, 690,
	225, 8, 663, 262, 638, 726, 77, 78, 651, 650,
	653, 678, 117, 572, 117, 379, 697, 919, 686, 635,
	7, 613, 677, 117, 230, 116, 289, 255, 6, 674,
	675, 708, 232, 255, 304, 637, 382, 628, 691, 528,
	611, 123, 124, 304, 629, 545, 547, 796, 134, 46,
	230, 112, 920, 134, 658, 714, 112, 717, 232, 753,
	754, 755, 752, 751, 750, 280, 281, 722, 676, 701,
	709, 146, 225, 732, 733, 746, 730, 298, 748, 117,
	692, 734, 676, 320, 631, 712, 122, 542, 192, 676,
	526, 256, 257, 720, 696, 300, 303, 256, 257, 761,
	762, 724, 707, 255, 225, 306, 123, 124, 422, 636,
	711, 635, 756, 804, 523, 230, 533, 740, 230, 758,
	739, 746, 119, 232, 748, 148, 232, 324, 908, 753,
	754, 755, 752, 751, 750, 632, 632, 806, 805, 225,
	770, 765, 842, 768, 148, 369, 766, 767, 727, 773,
	146, 703, 117, 255, 521, 129, 787, 776, 422, 729,
	602, 785, 577, 780, 807, 782, 808, 256, 257, 546,
	536, 811, 801, 810, 897, 753, 754, 755, 752, 751,
	750, 377, 707, 375, 195, 230, 194, 255, 193, 822,
	187, 763, 278, 232, 828, 778, 779, 589, 830, 222,
	612, 818, 928, 408, 616, 836, 874, 817, 835, 839,
	251, 829, 646, 676, 323, 788, 527, 256, 257, 632,
	879, 560, 632, 912, 841, 880, 789, 632, 632, 747,
	887, 843, 757, 849, 179, 863, 745, 255, 781, 778,
	779, 144, 282, 865, 847, 856, 635, 802, 862, 744,
	279, 256, 257, 255, 676, 557, 867, 860, 252, 881,
	556, 872, 705, 531, 797, 885, 852, 785, 894, 668,
	43, 893, 42, 898, 899, 165, 168, 169, 38, 656,
	903, 834, 665, 904, 662, 905, 367, 149, 145, 909,
	857, 142, 647, 859, 641, 913, 163, 162, 548, 632,
	894, 256, 257, 893, 910, 544, 164, 166, 167, 916,
	816, 161, 923, 772, 1, 731, 16, 256, 257, 925,
	15, 911, 224, 108, 81, 914, 50, 83, 49, 48,
	597, 72, 265, 929, 936, 577, 939, 932, 267, 935,
	934, 61, 62, 248, 45, 940, 941, 676, 942, 118,
	297, 891, 892, 930, 890, 889, 853, 946, 945, 743,
	949, 381, 4, 632, 88, 89, 70, 47, 93, 94,
	36, 670, 105, 310, 27, 3, 435, 798, 110, 26,
	18, 17, 737, 19, 0, 30, 0, 31, 0, 0,
	20, 0, 0, 0, 21, 22, 35, 37, 13, 23,
	33, 0, 0, 34, 12, 0, 24, 632, 29, 86,
	87, 10, 39, 40, 41, 0, 0, 0, 0, 51,
	109, 0, 102, 98, 99, 100, 95, 96, 746, 0,
	0, 748, 0, 0, 103, 0, 0, 0, 0, 11,
	101, 97, 112, 0, 90, 91, 92, 0, 0, 0,
	0, 85, 53, 0, 0, 0, 74, 75, 25, 77,
	78, 0, 0, 0, 54, 55, 76, 63, 64, 65,
	66, 67, 68, 69, 0, 214, 215, 0, 0, 0,
	0, 0, 753, 754, 755, 752, 751, 750, 202, 203,
	204, 205, 206, 207, 208, 209, 210, 211, 212, 213,
	104, 73, 14, 627, 32, 0, 60, 0, 52, 0,
	0, 0, 57, 56, 58, 59, 71, 106, 4, 0,
	88, 89, 70, 47, 93, 94, 36, 844, 105, 0,
	27, 201, 0, 0, 110, 26, 18, 17, 0, 19,
	0, 30, 0, 31, 0, 0, 20, 0, 0, 0,
	21, 22, 35, 37, 13, 23, 33, 0, 0, 34,
	12, 0, 24, 0, 29, 86, 87, 10, 39, 40,
	41, 0, 0, 0, 0, 51, 109, 0, 102, 98,
	99, 100, 95, 96, 746, 0, 0, 748, 0, 0,
	103, 0, 0, 0, 0, 11, 101, 97, 112, 0,
	90, 91, 92, 0, 0, 0, 0, 85, 53, 0,
	0, 0, 74, 75, 25, 77, 78, 0, 0, 0,
	54, 55, 76, 63, 64, 65, 66, 67, 68, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 753, 754,
	755, 752, 751, 750, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 73, 14, 539,
	32, 0, 60, 0, 52, 0, 0, 0, 57, 56,
	58, 59, 71, 106, 4, 0, 88, 89, 70, 47,
	93, 94, 36, 809, 105, 0, 27, 0, 0, 0,
	110, 26, 18, 17, 0, 19, 0, 30, 0, 31,
	0, 0, 20, 0, 0, 0, 21, 22, 35, 37,
	13, 23, 33, 0, 0, 34, 12, 0, 24, 0,
	29, 86, 87, 10, 39, 40, 41, 0, 0, 0,
	0, 51, 109, 0, 102, 98, 99, 100, 95, 96,
	746, 0, 0, 748, 0, 0, 103, 0, 0, 0,
	0, 11, 101, 97, 112, 0, 90, 91, 92, 0,
	0, 0, 0, 85, 53, 0, 0, 0, 74, 75,
	25, 77, 78, 0, 0, 0, 54, 55, 76, 63,
	64, 65, 66, 67, 68, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 753, 754, 755, 752, 751, 750,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 73, 14, 0, 32, 0, 60, 0,
	52, 0, 0, 0, 57, 56, 58, 59, 71, 106,
	312, 0, 88, 89, 70, 47, 93, 94, 36, 742,
	105, 0, 27, 0, 0, 0, 110, 26, 18, 17,
	0, 19, 0, 30, 0, 31, 0, 0, 20, 0,
	0, 0, 21, 22, 35, 37, 0, 23, 33, 0,
	0, 34, 0, 0, 24, 0, 29, 86, 87, 318,
	39, 40, 41, 0, 0, 0, 0, 51, 109, 0,
	102, 98, 99, 100, 95, 96, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 134, 101, 97,
	112, 0, 90, 91, 92, 0, 0, 0, 0, 85,
	53, 0, 0, 0, 74, 75, 25, 77, 78, 0,
	0, 0, 54, 55, 76, 63, 64, 65, 66, 67,
	68, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 73,
	14, 950, 32, 0, 60, 0, 52, 0, 0, 0,
	57, 56, 58, 59, 71, 106, 312, 0, 88, 89,
	70, 47, 93, 94, 36, 0, 105, 0, 27, 0,
	0, 0, 110, 26, 18, 17, 0, 19, 0, 30,
	0, 31, 0, 0, 20, 0, 0, 0, 21, 22,
	35, 37, 0, 23, 33, 0, 0, 34, 0, 0,
	24, 0, 29, 86, 87, 318, 39, 40, 41, 0,
	0, 0, 0, 51, 109, 0, 102, 98, 99, 100,
	95, 96, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 134, 101, 97, 112, 0, 90, 91,
	92, 0, 0, 0, 0, 85, 53, 0, 0, 0,
	74, 75, 25, 77, 78, 0, 0, 0, 54, 55,
	76, 63, 64, 65, 66, 67, 68, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 73, 14, 943, 32, 0,
	60, 0, 52, 0, 0, 0, 57, 56, 58, 59,
	71, 106, 312, 0, 88, 89, 70, 47, 93, 94,
	36, 0, 105, 0, 27, 0, 0, 0, 110, 26,
	18, 17, 0, 19, 0, 30, 0, 31, 0, 0,
	20, 0, 0, 0, 21, 22, 35, 37, 0, 23,
	33, 0, 0, 34, 0, 0, 24, 0, 29, 86,
	87, 318, 39, 40, 41, 0, 0, 0, 0, 51,
	109, 0, 102, 98, 99, 100, 95, 96, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 134,
	101, 97, 112, 0, 90, 91, 92, 0, 0, 0,
	0, 85, 53, 0, 0, 0, 74, 75, 25, 77,
	78, 0, 0, 0, 54, 55, 76, 63, 64, 65,
	66, 67, 68, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 73, 14, 938, 32, 0, 60, 0, 52, 0,
	0, 0, 57, 56, 58, 59, 71, 106, 312, 0,
	88, 89, 70, 47, 93, 94, 36, 0, 105, 0,
	27, 0, 0, 0, 110, 26, 18, 17, 0, 19,
	0, 30, 0, 31, 0, 0, 20, 0, 0, 0,
	21, 22, 35, 37, 0, 23, 33, 0, 0, 34,
	0, 0, 24, 0, 29, 86, 87, 318, 39, 40,
	41, 0, 0, 0, 0, 51, 109, 0, 102, 98,
	99, 100, 95, 96, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 134, 101, 97, 112, 0,
	90, 91, 92, 0, 0, 0, 0, 85, 53, 0,
	0, 0, 74, 75, 25, 77, 78, 0, 0, 0,
	54, 55, 76, 63, 64, 65, 66, 67, 68, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 73, 14, 927,
	32, 0, 60, 0, 52, 0, 0, 0, 57, 56,
	58, 59, 71, 106, 312, 0, 88, 89, 70, 47,
	93, 94, 36, 0, 105, 0, 27, 0, 0, 0,
	110, 26, 18, 17, 0, 19, 0, 30, 0, 31,
	0, 0, 20, 0, 0, 0, 21, 22, 35, 37,
	0, 23, 33, 0, 0, 34, 0, 0, 24, 0,
	29, 86, 87, 318, 39, 40, 41, 0, 0, 0,
	0, 51, 109, 0, 102, 98, 99, 100, 95, 96,
	0, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 134, 101, 97, 112, 0, 90, 91, 92, 0,
	0, 0, 0, 85, 53, 0, 0, 0, 74, 75,
	25, 77, 78, 0, 0, 0, 54, 55, 76, 63,
	64, 65, 66, 67, 68, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 73, 14, 926, 32, 0, 60, 0,
	52, 0, 0, 0, 57, 56, 58, 59, 71, 106,
	312, 0, 88, 89, 70, 47, 93, 94, 36, 0,
	105, 0, 27, 0, 0, 0, 110, 26, 18, 17,
	0, 19, 922, 30, 0, 31, 0, 0, 20, 0,
	0, 0, 21, 22, 35, 37, 0, 23, 33, 0,
	0, 34, 0, 0, 24, 0, 29, 86, 87, 318,
	39, 40, 41, 0, 0, 0, 0, 51, 109, 0,
	102, 98, 99, 100, 95, 96, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 134, 101, 97,
	112, 0, 90, 91, 92, 0, 0, 0, 0, 85,
	53, 0, 0, 0, 74, 75, 25, 77, 78, 0,
	0, 0, 54, 55, 76, 63, 64, 65, 66, 67,
	68, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 73,
	14, 0, 32, 0, 60, 0, 52, 0, 0, 0,
	57, 56, 58, 59, 71, 106, 312, 0, 88, 89,
	70, 47, 93, 94, 36, 0, 105, 0, 27, 0,
	0, 0, 110, 26, 18, 17, 0, 19, 0, 30,
	0, 31, 0, 0, 20, 0, 0, 0, 21, 22,
	35, 37, 0, 23, 33, 0, 0, 34, 0, 0,
	24, 0, 29, 86, 87, 318, 39, 40, 41, 0,
	0, 0, 0, 51, 109, 0, 102, 98, 99, 100,
	95, 96, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 134, 101, 97, 112, 0, 90, 91,
	92, 0, 0, 0, 0, 85, 53, 0, 0, 0,
	74, 75, 25, 77, 78, 0, 0, 0, 54, 55,
	76, 63, 64, 65, 66, 67, 68, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 73, 14, 870, 32, 0,
	60, 0, 52, 0, 0, 0, 57, 56, 58, 59,
	71, 106, 312, 0, 88, 89, 70, 47, 93, 94,
	36, 0, 105, 0, 27, 0, 0, 0, 110, 26,
	18, 17, 0, 19, 0, 30, 866, 31, 0, 0,
	20, 0, 0, 0, 21, 22, 35, 37, 0, 23,
	33, 0, 0, 34, 0, 0, 24, 0, 29, 86,
	87, 318, 39, 40, 41, 0, 0, 0, 0, 51,
	109, 0, 102, 98, 99, 100, 95, 96, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 134,
	101, 97, 112, 0, 90, 91, 92, 0, 0, 0,
	0, 85, 53, 0, 0, 0, 74, 75, 25, 77,
	78, 0, 0, 0, 54, 55, 76, 63, 64, 65,
	66, 67, 68, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 73, 14, 0, 32, 0, 60, 0, 52, 0,
	0, 0, 57, 56, 58, 59, 71, 106, 312, 0,
	88, 89, 70, 47, 93, 94, 36, 0, 105, 0,
	27, 0, 0, 0, 110, 26, 18, 17, 0, 19,
	0, 30, 0, 31, 791, 0, 20, 0, 0, 0,
	21, 22, 35, 37, 0, 23, 33, 0, 0, 34,
	0, 0, 24, 0, 29, 86, 87, 318, 39, 40,
	41, 0, 0, 0, 0, 51, 109, 0, 102, 98,
	99, 100, 95, 96, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 134, 101, 97, 112, 0,
	90, 91, 92, 0, 0, 0, 0, 85, 53, 0,
	0, 0, 74, 75, 25, 77, 78, 0, 0, 0,
	54, 55, 76, 63, 64, 65, 66, 67, 68, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 73, 14, 0,
	32, 0, 60, 0, 52, 0, 0, 0, 57, 56,
	58, 59, 71, 106, 312, 0, 88, 89, 70, 47,
	93, 94, 36, 0, 105, 0, 27, 0, 0, 0,
	110, 26, 18, 17, 774, 19, 0, 30, 0, 31,
	0, 0, 20, 0, 0, 0, 21, 22, 35, 37,
	0, 23, 33, 0, 0, 34, 0, 0, 24, 0,
	29, 86, 87, 318, 39, 40, 41, 0, 0, 0,
	0, 51, 109, 0, 102, 98, 99, 100, 95, 96,
	0, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 134, 101, 97, 112, 0, 90, 91, 92, 0,
	0, 0, 0, 85, 53, 0, 0, 0, 74, 75,
	25, 77, 78, 0, 0, 0, 54, 55, 76, 63,
	64, 65, 66, 67, 68, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 73, 14, 0, 32, 0, 60, 0,
	52, 0, 0, 0, 57, 56, 58, 59, 71, 106,
	312, 0, 88, 89, 70, 47, 93, 94, 36, 0,
	105, 0, 27, 0, 0, 0, 110, 26, 18, 17,
	0, 19, 0, 30, 0, 31, 0, 0, 20, 0,
	0, 0, 21, 22, 35, 37, 0, 23, 33, 0,
	0, 34, 0, 0, 24, 0, 29, 86, 87, 318,
	39, 40, 41, 0, 0, 0, 0, 51, 109, 0,
	102, 98, 99, 100, 95, 96, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 134, 101, 97,
	112, 0, 90, 91, 92, 0, 0, 0, 0, 85,
	53, 0, 0, 685, 74, 75, 25, 77, 78, 0,
	0, 0, 54, 55, 76, 63, 64, 65, 66, 67,
	68, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 73,
	14, 0, 32, 0, 60, 0, 52, 0, 0, 0,
	57, 56, 58, 59, 71, 106, 312, 0, 88, 89,
	70, 47, 93, 94, 36, 0, 105, 0, 27, 0,
	0, 0, 110, 26, 18, 17, 0, 19, 0, 30,
	0, 31, 0, 0, 20, 0, 0, 0, 21, 22,
	35, 37, 0, 23, 33, 0, 0, 34, 0, 0,
	24, 0, 29, 86, 87, 318, 39, 40, 41, 0,
	0, 0, 0, 51, 109, 0, 102, 98, 99, 100,
	95, 96, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 134, 101, 97, 112, 0, 90, 91,
	92, 0, 0, 0, 0, 85, 53, 0, 0, 0,
	74, 75, 25, 77, 78, 0, 0, 0, 54, 55,
	76, 63, 64, 65, 66, 67, 68, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 73, 14, 567, 32, 0,
	60, 0, 52, 0, 0, 0, 57, 56, 58, 59,
	71, 106, 312, 0, 88, 89, 70, 47, 93, 94,
	36, 0, 105, 0, 27, 0, 0, 0, 110, 26,
	18, 17, 0, 19, 0, 30, 0, 31, 0, 0,
	20, 0, 0, 0, 21, 22, 35, 37, 0, 23,
	33, 0, 0, 34, 0, 0, 24, 0, 29, 86,
	87, 318, 39, 40, 41, 0, 0, 0, 0, 51,
	109, 0, 102, 98, 99, 100, 95, 96, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 134,
	101, 97, 112, 0, 90, 91, 92, 0, 0, 0,
	0, 85, 53, 0, 0, 0, 74, 75, 25, 77,
	78, 0, 0, 0, 54, 55, 76, 63, 64, 65,
	66, 67, 68, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 73, 14, 311, 32, 0, 60, 0, 52, 0,
	0, 0, 57, 56, 58, 59, 71, 106, 312, 0,
	88, 89, 70, 47, 93, 94, 36, 0, 105, 0,
	27, 0, 0, 0, 110, 26, 18, 17, 0, 19,
	0, 30, 0, 31, 0, 0, 20, 0, 0, 0,
	21, 22, 35, 37, 0, 23, 33, 0, 0, 34,
	0, 0, 24, 0, 29, 86, 87, 318, 39, 40,
	41, 0, 0, 0, 0, 51, 109, 0, 102, 98,
	99, 100, 95, 96, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 134, 101, 97, 112, 0,
	90, 91, 92, 0, 0, 0, 0, 85, 53, 0,
	0, 0, 74, 75, 25, 77, 78, 0, 0, 0,
	54, 55, 76, 63, 64, 65, 66, 67, 68, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 73, 14, 0,
	32, 0, 60, 0, 52, 0, 0, 0, 57, 56,
	58, 59, 71, 106, 443, 444, 454, 455, 0, 0,
	434, 0, 105, 0, 0, 0, 0, 0, 0, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	489, 490, 491, 492, 493, 481, 482, 483, 484, 485,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 0, 501, 499, 500, 496, 497, 0, 0, 488,
	494, 495, 502, 503, 505, 504, 506, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 498,
	509, 508, 0, 0, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 456, 457, 458, 486, 487, 437, 438,
	439, 440, 441, 442, 88, 89, 70, 47, 93, 94,
	36, 0, 105, 0, 27, 0, 0, 0, 110, 26,
	18, 17, 0, 19, 0, 30, 0, 31, 0, 0,
	20, 0, 0, 0, 21, 22, 35, 133, 0, 23,
	33, 0, 433, 34, 0, 0, 24, 0, 29, 86,
	87, 0, 0, 0, 0, 0, 0, 106, 0, 51,
	109, 0, 102, 98, 99, 100, 95, 96, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 134,
	101, 97, 112, 0, 90, 91, 92, 0, 0, 0,
	0, 85, 53, 0, 0, 0, 74, 75, 25, 0,
	0, 0, 0, 0, 54, 55, 76, 63, 64, 65,
	66, 67, 68, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 73, 14, 0, 32, 786, 60, 0, 52, 0,
	0, 0, 57, 56, 58, 59, 71, 106, 88, 89,
	70, 47, 93, 94, 36, 0, 105, 0, 27, 0,
	0, 0, 110, 26, 18, 17, 0, 19, 0, 30,
	0, 31, 0, 0, 20, 0, 0, 0, 21, 22,
	35, 133, 0, 23, 33, 0, 0, 34, 0, 0,
	24, 0, 29, 86, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 109, 0, 102, 98, 99, 100,
	95, 96, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 134, 101, 97, 112, 0, 90, 91,
	92, 0, 0, 0, 0, 85, 53, 0, 0, 0,
	74, 75, 25, 0, 0, 0, 0, 0, 54, 55,
	76, 63, 64, 65, 66, 67, 68, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 73, 14, 0, 32, 861,
	60, 0, 52, 0, 0, 0, 57, 56, 58, 59,
	71, 106, 88, 89, 70, 47, 93, 94, 36, 0,
	105, 0, 27, 0, 0, 0, 110, 26, 18, 17,
	0, 19, 0, 30, 0, 31, 0, 0, 20, 0,
	0, 0, 21, 22, 35, 133, 0, 23, 33, 0,
	0, 34, 0, 0, 24, 0, 29, 86, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 109, 0,
	102, 98, 99, 100, 95, 96, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 134, 101, 97,
	112, 0, 90, 91, 92, 0, 0, 0, 0, 85,
	53, 0, 0, 0, 74, 75, 25, 0, 0, 0,
	0, 0, 54, 55, 76, 63, 64, 65, 66, 67,
	68, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 73,
	14, 0, 32, 687, 60, 0, 52, 0, 0, 0,
	57, 56, 58, 59, 71, 106, 88, 89, 70, 47,
	93, 94, 36, 0, 105, 0, 27, 0, 0, 0,
	110, 26, 18, 17, 0, 19, 0, 30, 0, 31,
	0, 0, 20, 0, 0, 0, 21, 22, 35, 133,
	0, 23, 33, 0, 0, 34, 0, 0, 24, 0,
	29, 86, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 109, 0, 102, 98, 99, 100, 95, 96,
	0, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 134, 101, 97, 112, 0, 90, 91, 92, 0,
	0, 0, 0, 85, 53, 0, 0, 0, 74, 75,
	25, 0, 0, 0, 0, 0, 54, 55, 76, 63,
	64, 65, 66, 67, 68, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 73, 14, 0, 32, 664, 60, 0,
	52, 0, 0, 0, 57, 56, 58, 59, 71, 106,
	88, 89, 70, 47, 93, 94, 36, 0, 105, 0,
	27, 0, 0, 0, 110, 26, 18, 17, 0, 19,
	0, 30, 0, 31, 0, 0, 20, 0, 0, 0,
	21, 22, 35, 133, 0, 23, 33, 0, 0, 34,
	0, 0, 24, 0, 29, 86, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 109, 0, 102, 98,
	99, 100, 95, 96, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 134, 101, 97, 112, 0,
	90, 91, 92, 0, 0, 0, 0, 85, 53, 0,
	0, 0, 74, 75, 25, 0, 0, 0, 0, 0,
	54, 55, 76, 63, 64, 65, 66, 67, 68, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 73, 14, 0,
	32, 643, 60, 0, 52, 0, 0, 0, 57, 56,
	58, 59, 71, 106, 88, 89, 70, 47, 93, 94,
	36, 0, 105, 0, 27, 0, 0, 0, 110, 26,
	18, 17, 0, 19, 0, 30, 0, 31, 0, 0,
	20, 0, 0, 0, 21, 22, 35, 133, 0, 23,
	33, 0, 0, 34, 0, 0, 24, 0, 29, 86,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	109, 0, 102, 98, 99, 100, 95, 96, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 134,
	101, 97, 112, 0, 90, 91, 92, 0, 0, 0,
	0, 85, 53, 0, 0, 0, 74, 75, 25, 0,
	0, 0, 0, 0, 54, 55, 76, 63, 64, 65,
	66, 67, 68, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 73, 14, 0, 32, 0, 60, 0, 52, 0,
	0, 0, 57, 56, 58, 59, 71, 106, 443, 444,
	454, 455, 0, 0, 896, 0, 0, 0, 0, 0,
	0, 0, 0, 459, 460, 461, 462, 463, 464, 465,
	466, 467, 468, 469, 489, 490, 491, 492, 493, 481,
	482, 483, 484, 485, 470, 471, 472, 473, 474, 475,
	476, 477, 478, 479, 480, 0, 501, 499, 500, 496,
	497, 0, 0, 488, 494, 495, 502, 503, 505, 504,
	506, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 895, 509, 508, 112, 0, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 456, 457, 458,
	486, 487, 437, 438, 439, 440, 441, 442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 444, 454, 455, 0, 0, 896,
	0, 0, 0, 0, 0, 0, 0, 915, 459, 460,
	461, 462, 463, 464, 465, 466, 467, 468, 469, 489,
	490, 491, 492, 493, 481, 482, 483, 484, 485, 470,
	471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
	0, 501, 499, 500, 496, 497, 0, 0, 488, 494,
	495, 502, 503, 505, 504, 506, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 895, 509,
	508, 112, 0, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 456, 457, 458, 486, 487, 437, 438, 439,
	440, 441, 442, 88, 89, 70, 0, 93, 94, 117,
	0, 105, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 886, 0, 0, 0, 0, 0, 86, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 109,
	0, 102, 98, 99, 100, 95, 96, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 134, 101,
	97, 112, 534, 90, 91, 92, 0, 0, 0, 0,
	85, 53, 0, 0, 0, 74, 75, 139, 0, 0,
	0, 0, 0, 54, 55, 76, 63, 64, 65, 66,
	67, 68, 69, 0, 0, 88, 89, 70, 0, 93,
	94, 117, 0, 105, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	73, 0, 0, 0, 0, 60, 530, 52, 133, 0,
	0, 57, 56, 58, 59, 71, 106, 0, 0, 0,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 109, 0, 102, 98, 99, 100, 95, 96, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	134, 101, 97, 112, 0, 90, 91, 92, 0, 0,
	0, 0, 85, 53, 0, 0, 0, 74, 75, 139,
	0, 0, 0, 0, 0, 54, 55, 76, 63, 64,
	65, 66, 67, 68, 69, 88, 89, 70, 0, 93,
	94, 117, 0, 105, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 73, 0, 0, 0, 0, 60, 133, 52,
	0, 0, 226, 57, 56, 58, 59, 71, 106, 0,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 109, 0, 102, 98, 99, 100, 95, 96, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	134, 101, 97, 112, 534, 90, 91, 92, 0, 0,
	0, 0, 85, 53, 0, 0, 0, 74, 75, 139,
	0, 0, 0, 0, 0, 54, 55, 76, 63, 64,
	65, 66, 67, 68, 69, 88, 89, 70, 0, 93,
	94, 117, 0, 105, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 73, 0, 0, 0, 0, 60, 133, 52,
	0, 0, 0, 57, 56, 58, 59, 71, 106, 0,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 109, 0, 102, 98, 99, 100, 95, 96, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	134, 101, 97, 112, 0, 90, 91, 92, 0, 0,
	0, 0, 85, 53, 0, 0, 0, 74, 75, 139,
	0, 0, 0, 0, 0, 54, 55, 76, 63, 64,
	65, 66, 67, 68, 69, 88, 89, 70, 0, 93,
	94, 117, 426, 105, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 73, 0, 0, 0, 0, 60, 133, 52,
	0, 0, 591, 57, 56, 58, 59, 71, 106, 0,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 109, 0, 102, 98, 99, 100, 95, 96, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	134, 101, 97, 112, 0, 90, 91, 92, 0, 0,
	0, 0, 85, 53, 0, 0, 0, 74, 75, 139,
	0, 0, 0, 0, 0, 54, 55, 76, 63, 64,
	65, 66, 67, 68, 69, 88, 89, 70, 0, 93,
	94, 117, 0, 105, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 73, 0, 0, 0, 0, 60, 133, 52,
	0, 0, 0, 57, 56, 58, 59, 71, 106, 0,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 109, 0, 102, 98, 99, 100, 95, 96, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	134, 101, 97, 112, 0, 90, 91, 92, 0, 0,
	0, 0, 85, 53, 0, 0, 0, 74, 75, 139,
	0, 0, 0, 0, 0, 54, 55, 76, 63, 64,
	65, 66, 67, 68, 69, 88, 89, 70, 0, 93,
	94, 117, 0, 105, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 73, 0, 0, 0, 0, 60, 133, 52,
	0, 0, 389, 57, 56, 58, 59, 71, 106, 0,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 109, 0, 102, 98, 99, 100, 95, 96, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	134, 101, 97, 112, 0, 90, 91, 92, 0, 0,
	0, 0, 85, 53, 0, 0, 0, 74, 75, 139,
	0, 0, 0, 0, 0, 54, 55, 76, 63, 64,
	65, 66, 67, 68, 69, 88, 89, 70, 0, 93,
	94, 117, 0, 105, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 73, 0, 0, 0, 365, 60, 133, 52,
	0, 0, 0, 57, 56, 58, 59, 71, 106, 0,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 109, 0, 102, 98, 99, 100, 95, 96, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	134, 101, 97, 112, 0, 90, 91, 92, 0, 0,
	0, 0, 85, 53, 0, 0, 0, 74, 75, 139,
	0, 0, 0, 0, 0, 54, 55, 76, 63, 64,
	65, 66, 67, 68, 69, 0, 0, 155, 157, 156,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 73, 0, 181, 178, 0, 60, 0, 52,
	0, 0, 0, 57, 56, 58, 59, 71, 106, 153,
	154, 165, 168, 169, 170, 171, 172, 173, 175, 177,
	0, 155, 157, 156, 179, 0, 0, 0, 0, 764,
	180, 159, 163, 162, 0, 0, 0, 0, 0, 158,
	0, 160, 164, 166, 167, 174, 176, 161, 181, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 154, 165, 168, 169, 170, 171,
	172, 173, 175, 177, 0, 155, 157, 156, 179, 0,
	0, 715, 0, 0, 180, 159, 163, 162, 0, 0,
	0, 0, 0, 158, 0, 160, 164, 166, 167, 174,
	176, 161, 181, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 154, 165,
	168, 169, 170, 171, 172, 173, 175, 177, 0, 0,
	0, 700, 155, 157, 156, 179, 0, 0, 180, 159,
	163, 162, 0, 0, 0, 0, 0, 158, 0, 160,
	164, 166, 167, 174, 176, 161, 0, 0, 0, 181,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 154, 165, 168, 169, 170,
	171, 172, 173, 175, 177, 0, 0, 0, 698, 155,
	157, 156, 179, 0, 0, 180, 159, 163, 162, 0,
	0, 0, 0, 0, 158, 0, 160, 164, 166, 167,
	174, 176, 161, 0, 0, 0, 181, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 153, 154, 165, 168, 169, 170, 171, 172, 173,
	175, 177, 0, 0, 0, 688, 155, 157, 156, 179,
	0, 0, 180, 159, 163, 162, 0, 0, 0, 0,
	0, 158, 0, 160, 164, 166, 167, 174, 176, 161,
	0, 0, 0, 181, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 154,
	165, 168, 169, 170, 171, 172, 173, 175, 177, 0,
	155, 157, 156, 179, 0, 0, 684, 0, 0, 180,
	159, 163, 162, 0, 0, 0, 0, 0, 158, 0,
	160, 164, 166, 167, 174, 176, 161, 181, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 154, 165, 168, 169, 170, 171, 172,
	173, 175, 177, 0, 155, 157, 156, 179, 0, 0,
	683, 0, 0, 180, 159, 163, 162, 0, 0, 0,
	0, 0, 158, 0, 160, 164, 166, 167, 174, 176,
	161, 181, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 154, 165, 168,
	169, 170, 171, 172, 173, 175, 177, 0, 0, 0,
	622, 155, 157, 156, 179, 0, 0, 180, 159, 163,
	162, 0, 0, 0, 0, 0, 158, 0, 160, 164,
	166, 167, 174, 176, 161, 0, 0, 0, 181, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 154, 165, 168, 169, 170, 171,
	172, 173, 175, 177, 0, 155, 157, 156, 179, 0,
	0, 621, 0, 0, 180, 159, 163, 162, 0, 0,
	0, 0, 0, 158, 0, 160, 164, 166, 167, 174,
	176, 161, 181, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 154, 165,
	168, 169, 170, 171, 172, 173, 175, 177, 0, 155,
	157, 156, 179, 0, 0, 620, 0, 0, 180, 159,
	163, 162, 0, 0, 0, 0, 0, 158, 0, 160,
	164, 166, 167, 174, 176, 161, 181, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 153, 154, 165, 168, 169, 170, 171, 172, 173,
	175, 177, 0, 0, 0, 603, 155, 157, 156, 179,
	0, 0, 180, 159, 163, 162, 0, 0, 0, 0,
	0, 158, 0, 160, 164, 166, 167, 174, 176, 161,
	0, 0, 0, 181, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 154,
	165, 168, 169, 170, 171, 172, 173, 175, 177, 0,
	155, 157, 156, 179, 0, 0, 594, 0, 0, 180,
	159, 163, 162, 0, 0, 0, 0, 0, 158, 0,
	160, 164, 166, 167, 174, 176, 161, 181, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 154, 165, 168, 169, 170, 171, 172,
	173, 175, 177, 565, 0, 0, 584, 155, 157, 156,
	179, 0, 0, 180, 159, 163, 162, 0, 0, 0,
	0, 0, 158, 0, 160, 164, 166, 167, 174, 176,
	161, 0, 0, 0, 181, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 153,
	154, 165, 168, 169, 170, 171, 172, 173, 175, 177,
	0, 155, 157, 156, 179, 0, 0, 582, 0, 0,
	180, 159, 163, 162, 0, 0, 0, 0, 0, 158,
	0, 160, 164, 166, 167, 174, 176, 161, 181, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 154, 165, 168, 169, 170, 171,
	172, 173, 175, 177, 0, 155, 157, 156, 179, 0,
	0, 0, 0, 0, 180, 159, 163, 162, 0, 0,
	0, 0, 0, 158, 0, 160, 164, 166, 167, 174,
	176, 161, 181, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 154, 165,
	168, 169, 170, 171, 172, 173, 175, 177, 0, 155,
	157, 156, 179, 561, 0, 0, 0, 0, 180, 159,
	163, 162, 0, 0, 0, 0, 0, 158, 0, 160,
	164, 166, 167, 174, 176, 161, 181, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 153, 154, 165, 168, 169, 170, 171, 172, 173,
	175, 177, 0, 155, 157, 156, 179, 0, 0, 555,
	0, 0, 180, 159, 163, 162, 0, 0, 0, 0,
	0, 158, 0, 160, 164, 166, 167, 174, 176, 161,
	181, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 153, 154, 165, 168, 169,
	170, 171, 172, 173, 175, 177, 0, 155, 157, 156,
	179, 0, 0, 551, 0, 0, 180, 159, 163, 162,
	0, 0, 0, 0, 0, 158, 0, 160, 164, 166,
	167, 174, 176, 161, 181, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 412, 0, 0, 0, 153,
	154, 165, 168, 169, 170, 171, 172, 173, 175, 177,
	0, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	180, 159, 163, 162, 155, 157, 156, 179, 0, 158,
	0, 160, 164, 166, 167, 174, 176, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 154, 165, 168,
	169, 170, 171, 172, 173, 175, 177, 0, 155, 157,
	156, 179, 0, 0, 0, 0, 0, 180, 159, 163,
	162, 0, 0, 0, 0, 0, 158, 0, 160, 164,
	166, 167, 174, 176, 161, 181, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 154, 165, 168, 169, 170, 171, 172, 173, 175,
	177, 0, 0, 0, 0, 373, 155, 157, 156, 179,
	0, 180, 159, 163, 162, 0, 0, 0, 0, 0,
	158, 0, 160, 164, 166, 167, 174, 176, 161, 0,
	0, 0, 0, 181, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 154,
	165, 168, 169, 170, 171, 172, 173, 175, 177, 0,
	0, 0, 0, 152, 155, 157, 156, 179, 0, 180,
	159, 163, 162, 0, 0, 0, 0, 0, 158, 0,
	160, 164, 166, 167, 174, 176, 161, 0, 0, 0,
	0, 181, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 154, 165, 168,
	169, 170, 171, 172, 173, 175, 177, 0, 0, 157,
	156, 179, 0, 0, 0, 0, 0, 180, 159, 163,
	162, 0, 0, 0, 0, 0, 158, 0, 160, 164,
	166, 167, 174, 176, 161, 181, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 154, 165, 168, 169, 170, 171, 172, 173, 175,
	177, 0, 0, 0, 156, 179, 0, 0, 0, 0,
	0, 180, 159, 163, 162, 0, 0, 0, 0, 0,
	158, 0, 160, 164, 166, 167, 174, 176, 161, 181,
	178, 428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 154, 165, 168, 169, 170,
	171, 172, 173, 175, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 180, 159, 163, 162, 0,
	0, 0, 0, 0, 158, 0, 160, 164, 166, 167,
	174, 176, 161, 0, 0, 0, 0, 181, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 154, 165, 168, 169, 170, 171, 172,
	173, 175, 177, 0, 0, 0, 0, 179, 0, 0,
	0, 0, 0, 180, 159, 163, 162, 0, 0, 0,
	0, 0, 158, 0, 160, 164, 166, 167, 174, 176,
	161, 181, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 154, 165, 168,
	169, 170, 171, 172, 173, 175, 177, 0, 0, 0,
	0, 179, 0, 0, 0, 0, 0, 180, 159, 163,
	162, 0, 0, 0, 0, 0, 158, 0, 160, 164,
	166, 167, 174, 176, 161, 181, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 154, 165, 168, 169, 170, 171, 172, 173, 175,
	177, 0, 0, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 159, 163, 162, 0, 0, 0, 0, 0,
	158, 0, 160, 164, 166, 167, 174, 176, 161, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 154, 165, 168, 169, 170, 171,
	172, 173, 175, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 159, 163, 162, 178, 0,
	0, 0, 0, 158, 0, 160, 164, 166, 167, 174,
	176, 161, 179, 0, 165, 168, 169, 170, 171, 172,
	173, 175, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 159, 163, 162, 178, 0, 0,
	0, 0, 158, 0, 160, 164, 166, 167, 174, 176,
	161, 179, 0, 165, 168, 169, 170, 171, 172, 173,
	175, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 159, 163, 162, 178, 0, 0, 0,
	0, 0, 0, 160, 164, 166, 167, 174, 176, 161,
	0, 0, 165, 168, 169, 170, 171, 172, 173, 175,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 162, 443, 444, 454, 455, 0,
	0, 434, 0, 164, 166, 167, 174, 176, 161, 0,
	459, 460, 461, 462, 463, 464, 465, 466, 467, 468,
	469, 489, 490, 491, 492, 493, 481, 482, 483, 484,
	485, 470, 471, 472, 473, 474, 475, 476, 477, 478,
	479, 480, 0, 501, 499, 500, 496, 497, 0, 0,
	488, 494, 495, 502, 503, 505, 504, 506, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	498, 509, 508, 0, 0, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 456, 457, 458, 486, 487, 437,
	438, 439, 440, 441, 442, 443, 444, 454, 455, 0,
	0, 933, 0, 0, 0, 0, 0, 0, 0, 0,
	459, 460, 461, 462, 463, 464, 465, 466, 467, 468,
	469, 489, 490, 491, 492, 493, 481, 482, 483, 484,
	485, 470, 471, 472, 473, 474, 475, 476, 477, 478,
	479, 480, 0, 501, 499, 500, 496, 497, 0, 0,
	488, 494, 495, 502, 503, 505, 504, 506, 507, 117,
	0, 105, 0, 0, 0, 0, 0, 110, 0, 0,
	498, 509, 508, 0, 0, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 456, 457, 458, 486, 487, 753,
	754, 755, 752, 751, 750, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 660, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 231, 0, 661, 0, 0,
	659, 0, 0, 0, 0, 0, 106,
}
var yyPact = [...]int{

	-1000, -1000, 1262, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	248, 473, 594, 735, -1000, -1000, -1000, 247, 4470, 246,
	241, 5621, 5621, 5621, 134, 703, 5621, -1000, 6819, 237,
	233, 231, -1000, 392, 5621, 770, 273, -2, 497, 768,
	766, 764, 463, 478, 961, -1000, -1000, 227, -1000, -1000,
	95, 226, 4961, 5621, 234, 234, 5621, 5621, 5621, 5621,
	5621, -1000, -1000, 5621, 5621, 5621, 5621, 5621, 5621, 5621,
	225, 5621, -1000, 831, 5621, 5621, 5621, -1000, -1000, -1000,
	53, -1000, 515, 509, -1000, 276, 219, 215, 5621, 5621,
	211, 5621, 5621, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 765, 815, -1000, 94, 171, 171, 200,
	-1000, 494, 732, 151, 732, 265, -1000, -1000, 329, 603,
	-14, 604, 732, -1000, -1000, -1000, -1000, -16, -1000, -55,
	3290, 5621, 652, -2, 486, 5621, 5621, 327, 6877, 624,
	324, 318, -17, -1000, -1000, -18, -2, -1000, -59, -29,
	-1000, 6877, -1000, 5621, 5621, 5621, 5621, 5621, 5621, 5621,
	5621, 5621, 5621, 5621, 5621, 5621, 5621, 5621, 5621, 5621,
	5621, 5621, 5621, 5621, 5621, 5621, 5621, 5621, 5621, 280,
	5511, 5621, 234, 5621, 735, -1000, 6761, 317, -1000, 763,
	-1000, 761, -1000, 550, -1000, 571, 196, 4470, 195, 316,
	269, 5401, 5621, 5621, 5621, 5621, 5621, 5621, 5621, 5621,
	5621, 5621, 5621, 5621, -1000, -1000, 5621, 5621, 5621, 88,
	4961, 51, -10, -1000, -1000, 6707, 234, 192, -1000, -1000,
	53, 5621, -1000, -1000, 4961, -1000, 414, 414, 429, 414,
	6640, 414, 414, 414, 414, 414, 414, 414, -1000, 5621,
	414, 385, 611, 681, -1000, 159, 5291, 234, 7097, 7043,
	7097, 5621, 3600, 3600, 171, -1000, 507, 137, 171, -1000,
	-1000, 5621, 5621, 6877, 6877, 5621, 6877, 6877, 605, -1000,
	731, 489, 611, 5621, -1000, -1000, 4849, -1000, 4961, 750,
	494, 312, 494, -1000, -1000, 1106, -1000, 311, -34, 595,
	732, -1000, -1000, 493, 749, 554, -1000, -1000, -1000, 5621,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 191, 6586,
	183, -1000, 309, -11, 6877, 6532, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5621, -1000, -1000, 7204, 7243, 6931,
	7097, 6985, 7282, 7321, 377, 107, 107, 107, 429, 414,
	429, 429, 369, 369, 187, 187, 187, 187, 734, 734,
	734, 734, 187, -1000, 6478, 5621, 7151, -13, -1000, -1000,
	6424, -33, 3134, -1000, -1000, -1000, 177, 550, 547, 564,
	382, -1000, 564, 5621, -1000, 5621, -1000, -1000, 7097, 5621,
	7097, 7097, 7097, 7097, 7097, 7097, 7097, 7097, 7097, 7097,
	7097, 7097, 6370, 50, 6313, 171, -1000, 5621, -1000, 150,
	-64, -1000, 5181, -1000, 4961, 6259, 49, -1000, 149, -1000,
	-1000, -1000, -1000, 268, 740, 6202, 77, 347, 5621, 46,
	171, -1000, -1000, 5621, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	171, -1000, -1000, -1000, -1000, 134, 5621, 5621, 88, 134,
	550, -15, -1000, 6877, 6148, 6094, -1000, -1000, -1000, 6037,
	-1000, -19, -1000, 6877, 5621, 120, -1000, -1000, 950, -1000,
	-1000, -1000, 485, 552, 592, 659, -1000, 483, 735, 6877,
	117, 4316, 5621, 5621, -1000, 182, 134, 722, 169, 6877,
	5621, 5621, 7151, 116, -1000, 7629, 4162, -1000, 165, 409,
	547, -1000, 564, -1000, -1000, 381, -35, -1000, 5983, 5929,
	2978, 7321, 4008, -1000, -1000, -1000, 5872, -72, 5621, 4961,
	6877, 234, 163, 112, -1000, -1000, -1000, 40, -1000, -1000,
	671, -1000, -1000, -1000, -1000, 5621, -1000, 7097, -1000, -1000,
	5815, -1000, -1000, 4, 5758, -1000, -1000, 547, 111, -1000,
	-1000, -1000, -1000, 109, -1000, 6877, -1000, -1000, 732, 479,
	-1000, 732, 534, -23, -1000, -1000, 732, 659, -1000, -1000,
	297, -1000, -1000, -1000, 5704, 296, 5621, -1000, 295, 294,
	-1000, -1000, 409, -1000, 7151, 288, 234, 108, 537, 234,
	158, 4961, -1000, -1000, -1000, 622, 409, 106, -20, -1000,
	-1, -1000, -1000, 559, -1000, -1000, -1000, -1000, 378, -35,
	1286, -1000, -1000, 4470, 267, 287, -1000, -1000, -1000, 5621,
	7097, -1000, -1000, 4961, -72, -1000, -1000, 5650, -1000, -1000,
	-1000, -1000, -1000, 5621, -1000, 5071, -27, -1000, 732, 344,
	-1000, -1000, -23, -1000, 2822, 286, 5621, 6877, 403, -1000,
	797, -1000, 102, -1000, -1000, 3700, 7629, -1000, 4961, 2,
	2666, -1000, 156, 365, 101, 593, -1000, 469, -1000, -1000,
	363, -1000, -1000, -1000, 691, 690, 564, 551, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1130, 564, -1000, -1000,
	-1000, 3446, 7097, 100, 343, 362, -1000, -1000, 342, -1000,
	-27, -1000, 659, 341, 282, -1000, 93, -1000, 5621, 189,
	384, 281, 753, 593, -1000, -1000, -1000, 87, -1000, 82,
	-1000, 279, 564, -1000, 251, 251, 155, 409, 720, -1000,
	-1000, 974, -36, -1000, -65, 7471, -2, -45, -1000, -1000,
	-1000, 3446, -72, -1000, -1000, -1000, 732, 339, -1000, -1000,
	-1000, 3854, 313, -1000, -1000, -1000, -1000, -1000, 278, 251,
	2510, 3700, -1000, -1000, 74, -1000, 2354, 357, 409, 356,
	179, -1000, -75, 667, -1000, -1000, -1000, -1000, 5621, -37,
	-1000, -76, 7471, -1000, -1000, 4749, 621, -1000, -1000, -1000,
	-1000, -1000, -1000, 3446, -1000, 355, 277, -1000, 79, -1000,
	-1000, -1000, -1000, -1000, -38, -1000, -1000, 706, 5621, -1000,
	691, 6877, -1000, -1000, 5621, -1000, -1000, 4624, -1000, 266,
	110, 562, 613, 504, -1000, 486, -1000, -1000, 2198, 3446,
	-1000, -1000, 354, 564, 2042, 1886, -1000, -1000, -1000, 6877,
	-1000, -1000, 7471, 6877, 96, -1000, -1000, -1000, -1000, 564,
	7571, 7471, 97, 1730, -1000, -1000, -1000, -1000, 179, -1000,
	-1000, 409, -35, -1000, -1000, 7471, -1000, -1000, -1000, 1574,
	-1000, 75, -1000, -1000, 251, 262, -1000, -1000, -1000, 1418,
	-1000,
}
var yyPgo = [...]int{

	0, 972, 967, 49, 9, 966, 2, 26, 15, 5,
	965, 25, 963, 79, 3, 12, 36, 16, 961, 71,
	52, 47, 46, 951, 41, 639, 949, 8, 13, 10,
	947, 946, 11, 945, 944, 942, 941, 940, 18, 699,
	939, 43, 63, 45, 0, 934, 94, 933, 17, 6,
	932, 32, 931, 80, 928, 62, 922, 921, 116, 920,
	78, 919, 274, 918, 102, 917, 916, 56, 48, 51,
	119, 31, 914, 913, 81, 912, 38, 910, 906, 42,
	40, 39, 34, 19, 905, 904, 73, 180, 547, 83,
	21, 37, 903, 900, 895, 888, 1, 884, 30, 883,
	882, 881, 878, 877, 876, 14, 874, 872, 871, 870,
	869, 29, 4, 868, 20, 7, 87, 33, 862, 860,
	859, 854, 853, 852, 850, 845, 839, 837, 826, 823,
	822, 820, 819, 815, 813, 811, 804, 802, 800, 796,
	792, 551, 789, 787, 744, 741,
}
var yyR1 = [...]int{

	0, 85, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 6, 6, 86, 86,
	87, 87, 9, 9, 9, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	39, 39, 37, 37, 40, 40, 7, 7, 92, 91,
	91, 93, 90, 90, 94, 88, 88, 38, 38, 42,
	42, 41, 41, 95, 89, 89, 96, 96, 12, 12,
	12, 12, 12, 12, 12, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 107,
	107, 108, 109, 108, 84, 84, 104, 110, 104, 82,
	13, 1, 1, 2, 2, 19, 19, 113, 113, 25,
	25, 20, 21, 22, 22, 23, 23, 24, 24, 83,
	83, 83, 83, 99, 99, 105, 105, 106, 106, 100,
	100, 100, 100, 117, 117, 117, 8, 8, 97, 97,
	118, 118, 77, 77, 119, 119, 78, 78, 112, 112,
	120, 121, 120, 17, 17, 18, 18, 15, 15, 16,
	16, 16, 14, 14, 70, 70, 122, 123, 122, 71,
	71, 124, 101, 101, 79, 125, 102, 102, 80, 80,
	114, 114, 26, 26, 26, 26, 115, 130, 115, 31,
	31, 31, 131, 131, 32, 32, 33, 34, 34, 34,
	34, 35, 35, 36, 30, 30, 126, 126, 128, 128,
	132, 132, 27, 27, 27, 27, 27, 27, 133, 127,
	127, 28, 28, 134, 129, 129, 29, 43, 135, 103,
	103, 81, 98, 98, 137, 136, 136, 56, 52, 52,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 111, 3, 3, 48,
	48, 140, 139, 139, 49, 49, 72, 72, 72, 72,
	64, 64, 53, 53, 47, 47, 138, 138, 138, 55,
	55, 67, 67, 67, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	68, 68, 68, 44, 44, 46, 46, 65, 66, 66,
	66, 73, 73, 73, 61, 61, 61, 61, 61, 61,
	60, 60, 60, 62, 62, 62, 63, 63, 54, 54,
	54, 54, 54, 54, 74, 74, 74, 69, 69, 69,
	116, 76, 76, 143, 142, 142, 75, 75, 75, 75,
	75, 75, 141, 141, 141, 141, 58, 58, 58, 58,
	58, 58, 58, 59, 59, 59, 59, 50, 50, 50,
	50, 50, 50, 50, 144, 145, 144, 51,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 0,
	1, 3, 1, 3, 2, 1, 1, 1, 1, 1,
	1, 4, 3, 5, 4, 3, 4, 3, 4, 3,
	1, 1, 6, 7, 6, 7, 0, 1, 0, 4,
	1, 0, 4, 1, 0, 4, 1, 1, 2, 1,
	3, 1, 2, 0, 4, 1, 2, 0, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 1, 5, 7,
	9, 5, 3, 3, 3, 3, 3, 3, 1, 2,
	6, 7, 9, 5, 1, 6, 3, 3, 2, 0,
	9, 1, 0, 4, 0, 4, 1, 0, 4, 1,
	11, 0, 1, 0, 1, 9, 8, 1, 2, 1,
	1, 6, 7, 0, 2, 0, 2, 0, 2, 1,
	2, 4, 3, 1, 4, 1, 4, 1, 4, 3,
	4, 4, 5, 0, 5, 4, 1, 1, 1, 4,
	5, 6, 1, 3, 6, 7, 3, 6, 1, 0,
	1, 0, 4, 4, 6, 0, 1, 1, 2, 1,
	1, 1, 0, 2, 2, 4, 1, 0, 4, 1,
	2, 0, 4, 1, 1, 0, 4, 1, 1, 3,
	2, 0, 3, 4, 3, 10, 1, 0, 4, 1,
	2, 3, 1, 2, 2, 2, 3, 3, 3, 4,
	3, 1, 1, 3, 1, 3, 1, 1, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 4,
	1, 2, 4, 0, 4, 1, 4, 4, 0, 4,
	1, 1, 0, 1, 0, 4, 1, 8, 3, 2,
	6, 5, 3, 4, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 5, 4, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 3, 2,
	1, 2, 4, 2, 11, 12, 0, 0, 1, 0,
	4, 0, 4, 1, 1, 2, 2, 4, 4, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 0,
	1, 4, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 3, 1, 1,
	1, 3, 3, 1, 1, 0, 1, 1, 1, 3,
	1, 1, 3, 1, 1, 4, 4, 4, 4, 1,
	1, 1, 3, 1, 4, 2, 3, 3, 1, 4,
	4, 3, 3, 3, 1, 3, 1, 1, 3, 1,
	1, 0, 1, 0, 4, 1, 3, 1, 4, 2,
	6, 4, 2, 2, 1, 2, 1, 4, 3, 3,
	3, 6, 3, 1, 1, 2, 1, 5, 4, 2,
	2, 4, 2, 2, 1, 0, 4, 1,
}
var yyChk = [...]int{

	-1000, -85, -86, -10, 2, -11, -13, -19, -20, -21,
	51, 79, 44, 38, 142, -77, -78, 21, 20, 23,
	30, 34, 35, 39, 46, 98, 19, 14, -44, 48,
	25, 27, 144, 40, 43, 36, 10, 37, -113, 52,
	53, 54, -118, -119, -60, -45, -25, 7, -61, -63,
	-66, 59, 148, 92, 104, 105, 153, 152, 154, 155,
	146, -52, -50, 107, 108, 109, 110, 111, 112, 113,
	6, 156, -57, 141, 96, 97, 106, 99, 100, -62,
	-68, -72, -64, -65, -67, 91, 49, 50, 4, 5,
	84, 85, 86, 8, 9, 66, 67, 81, 63, 64,
	65, 80, 62, 74, 140, 12, 157, -9, -73, 60,
	18, -87, 82, 146, 82, -87, 142, 10, -40, -39,
	-88, -87, 82, 37, 38, -41, -42, -89, -43, 10,
	-96, 146, -11, 37, 79, 146, 146, -46, -44, 98,
	-46, -46, -101, -79, -62, -102, 37, -80, 12, -103,
	-81, -44, 144, 129, 130, 87, 89, 88, 159, 151,
	161, 167, 153, 152, 162, 131, 163, 164, 132, 133,
	134, 135, 136, 137, 165, 138, 166, 139, 115, 90,
	150, 114, 146, 146, 146, 142, -44, 10, 145, -3,
	151, 52, -25, 10, 10, 10, 93, 94, 93, 95,
	94, 160, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 104, 105, 146, 148, 142, 57,
	146, -116, -142, -76, -75, -44, 151, 59, -44, -60,
	-68, 146, -67, 98, 148, -60, -44, -44, -44, -44,
	-44, -44, -44, -44, -44, -44, -44, -44, -47, 146,
	-44, -138, 17, -141, -58, 12, 76, 77, -44, -44,
	-44, 148, 78, 78, -53, -56, -64, -54, 52, -9,
	-62, 146, 146, -44, -44, 146, -44, -44, 17, 75,
	-141, -141, 17, 142, -62, -70, 146, -70, 146, 82,
	-87, 147, -87, 144, 142, -86, 144, -37, -88, -87,
	82, 144, 158, 82, 29, -87, -42, 144, 158, 160,
	-12, 143, 2, -11, -13, -19, -20, -21, 51, -44,
	21, -3, -98, -136, -44, -44, 144, 144, 144, 144,
	158, 144, 158, -3, 160, 144, 158, -44, -44, -44,
	-44, -44, -44, -44, -44, -44, -44, -44, -44, -44,
	-44, -44, -44, -44, -44, -44, -44, -44, -44, -44,
	-44, -44, -44, -53, -44, 145, -44, -104, -82, -60,
	-44, -89, -96, 144, 144, 10, -111, 10, -22, 55,
	-111, -23, 55, 146, -11, 146, 144, 145, -44, 151,
	-44, -44, -44, -44, -44, -44, -44, -44, -44, -44,
	-44, -44, -44, -46, -44, -69, 10, 142, -62, -116,
	149, 158, 58, -60, 146, -44, -116, 147, -46, 141,
	-58, -58, 17, 148, 57, -44, 11, -60, 58, -46,
	-74, -6, -62, 142, 10, -5, -4, 98, 99, 100,
	101, 102, 103, 4, 5, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 6, 7, 93, 94, 95, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 35, 36, 37, 38, 39, 96, 97, 59, 30,
	31, 32, 33, 34, 60, 61, 55, 56, 79, 53,
	54, 52, 62, 63, 65, 64, 66, 67, 81, 80,
	-74, -6, -62, -55, -70, 78, 148, 142, 57, 78,
	-55, -144, -51, -44, -44, -44, 75, 75, 140, -44,
	147, -122, -71, -44, 83, -116, 10, 144, -86, 143,
	144, 144, 82, -87, -94, 142, 10, 82, -95, -44,
	146, 147, 146, 144, 158, 147, -124, -125, -111, -44,
	-135, 145, -44, -7, 158, 29, 147, 143, -111, 146,
	-22, -24, 56, -9, 142, -111, -115, -9, -44, -44,
	-96, -44, 147, 149, 143, -70, -44, 147, 160, -143,
	-44, 151, 59, -116, 147, 149, 147, -59, 10, 13,
	152, 12, 10, 143, 143, 148, 143, -44, 149, -70,
	-44, -70, -62, -46, -44, -69, -62, -22, -7, 158,
	147, 147, 143, -7, 158, -44, 147, 143, 142, 82,
	-41, 82, -87, -91, -38, -42, -39, 142, -43, -111,
	147, -97, -11, 145, -44, -98, -137, -100, 142, 145,
	-79, -80, 146, -81, -44, 147, -110, -83, -60, 151,
	59, 148, -106, -11, 145, -107, 146, -112, -120, -17,
	-18, -15, -16, 150, 60, 61, -9, -24, -111, -115,
	-114, 142, 158, 147, 147, 95, -11, 145, 143, 160,
	-44, -76, -60, 146, 147, 149, 13, -44, 143, 149,
	143, -24, 147, -145, 147, -123, -90, -42, 142, -7,
	158, -42, -91, 144, -96, 147, 144, -44, -117, 144,
	-117, 144, -112, 144, -82, 147, 58, -60, 146, -116,
	-96, -84, 41, 42, -112, 147, 158, -1, 151, -16,
	-111, 142, 143, -26, -126, -128, 44, -132, 47, -27,
	103, 102, 101, 98, 99, 100, -114, -130, -11, 145,
	144, -96, -44, -116, 149, -111, -51, -71, -7, 158,
	-90, 143, -92, -7, 22, 144, -98, 143, 32, 33,
	-117, 31, -117, 147, -105, -11, 145, -83, -60, -116,
	149, 28, 146, 142, 147, -48, 44, -121, -2, 83,
	142, -114, -127, -28, 12, 38, 37, -115, -27, 143,
	-9, -96, 147, 143, 142, 143, -93, -7, -38, 143,
	144, 147, -44, -8, 145, 144, 143, 144, 31, -48,
	-96, 147, 147, 144, -108, -9, -96, -14, 145, -14,
	146, -17, 12, -114, 143, 144, 158, -111, 160, -129,
	-29, -6, -3, -31, 144, 142, -114, -42, 143, -99,
	-11, 145, -8, -96, 144, -14, 26, -105, 12, 159,
	143, 142, -15, 142, -139, -49, 12, 151, 160, 143,
	-133, -44, 144, 158, 160, -6, 143, -131, -32, -33,
	-34, -36, -35, -9, -6, 79, 10, 143, -96, -96,
	142, 144, 147, -109, -96, -96, 147, 158, 12, -44,
	-28, -111, -134, -44, -111, 143, -32, 144, 144, 45,
	29, 78, 24, -96, 142, -9, 143, 143, -140, -29,
	-111, 146, -115, 10, -4, -27, -6, 144, 143, -96,
	-49, -112, -6, 143, 147, -14, -30, 144, 142, -96,
	143,
}
var yyDef = [...]int{

	79, -2, -2, 78, 85, 86, 87, 88, 89, 90,
	0, 0, 0, 0, 127, 136, 137, 0, 0, 0,
	0, 435, 435, 435, 0, 400, 0, 148, 0, 0,
	0, 0, 154, 0, 0, 0, 80, 387, 0, 0,
	0, 0, 212, 0, -2, 434, 177, 0, -2, 451,
	437, 0, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 363, 367, 0, 0, 0, 0, 0, 0, 0,
	404, 0, 377, 406, 0, 380, 0, 179, 180, 444,
	429, 449, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 415, 416, 417, 418, 419, 420,
	421, 422, 423, 0, 0, 453, 0, -2, 0, 0,
	413, 82, 0, 0, 0, 0, 79, 80, 0, 0,
	0, 119, 0, 100, 101, 116, 121, 0, 125, 0,
	0, 0, 0, 387, 0, 302, 0, 0, 436, 400,
	0, 0, 0, 243, 244, 0, 387, 247, 248, 0,
	300, 301, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 158, 386,
	388, 0, 178, 183, 386, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 327, 329, 0, 435, 0, 0,
	471, 0, 470, 475, 472, 477, 0, 0, 314, -2,
	0, 0, -2, 400, 471, -2, 348, 349, 350, 351,
	0, 368, 369, 370, 371, 372, 373, 374, 375, 435,
	376, 0, 407, 408, 484, 486, 0, 0, 379, 381,
	383, 435, 0, 0, 409, 309, 402, 403, 409, 401,
	458, 0, 0, 499, 500, 0, 502, 503, 0, 425,
	0, 0, 0, 0, 455, 396, 0, 399, 471, 0,
	84, 0, 83, 92, 79, 0, 95, 0, 0, 119,
	0, 97, 114, 0, 0, 119, 122, 99, 123, 0,
	126, 135, 128, 129, 130, 131, 132, 133, 0, 0,
	0, 386, 0, 303, 306, 0, 142, 143, 144, 145,
	241, 146, 245, 386, 0, 147, 298, 331, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 361, 0, 0, 366, 106, 166, -2,
	0, 0, 0, 156, 157, 386, 0, 183, 187, 0,
	0, 386, 0, 0, 213, 0, 216, 127, 312, 0,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 0, 0, 452, 467, 0, 469, 0,
	412, 473, 0, -2, 471, 0, 0, -2, 0, 378,
	485, 482, 483, 0, 0, 0, 0, 438, 0, 0,
	0, -2, -2, 0, 76, 77, 69, 70, 71, 72,
	73, 74, 75, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	0, -2, -2, 308, 410, 0, 435, 0, 0, 0,
	183, 106, 504, 507, 0, 0, 424, 427, 426, 0,
	234, 106, 236, 239, 0, 0, 81, 91, 0, 94,
	96, 98, 0, 119, 0, 0, 120, 0, 0, 386,
	0, 0, 0, 302, 304, 0, 0, 0, 0, 249,
	0, 0, 365, 0, -2, 0, 0, 159, 0, -2,
	187, 386, 0, 184, 251, 0, 186, 256, 0, 0,
	0, 313, 0, 445, 447, 448, 0, 0, 0, 471,
	476, 0, 0, 0, -2, 412, 405, 0, 493, 494,
	0, 496, 488, 489, 490, 0, 492, 382, 446, 397,
	0, 398, 462, 0, 0, 461, 463, 187, 0, -2,
	498, 501, 454, 0, -2, 240, 411, 93, 0, 0,
	115, 0, 119, 106, 110, 117, 0, 0, 124, 297,
	0, 138, 208, 127, 0, 0, 0, 141, 203, 203,
	242, 246, -2, 299, 364, 0, 0, 0, -2, 0,
	0, 471, 153, 197, 127, 164, -2, 0, 218, 220,
	171, 226, 227, 0, 229, 230, 231, 386, 0, 188,
	278, 251, 257, 0, 0, 0, 210, 127, 468, 0,
	311, 474, -2, 471, 481, 487, 495, 0, 465, 459,
	460, 386, 497, 0, 235, 0, 106, 113, 0, 0,
	-2, 118, 106, 134, 0, 0, 302, 305, 0, 203,
	0, 203, 0, 150, 168, 0, 0, -2, 471, 0,
	0, 155, 0, 0, 0, 389, 221, 173, 172, 228,
	0, 251, 181, 250, 0, 0, 0, -2, 277, 280,
	282, 283, 284, 285, 286, 287, 278, 0, 211, 127,
	217, -2, 310, 0, 0, 0, 506, 238, 0, -2,
	106, 104, 0, 0, 0, 139, 0, 199, 0, 0,
	0, 0, 0, 389, 151, 195, 127, 0, -2, 0,
	-2, 0, 0, 127, 232, 232, 0, 225, 0, 174,
	251, 278, 0, 290, 386, 0, 387, 0, 281, 182,
	258, -2, 480, 491, 251, 102, 0, 0, 109, 105,
	209, 0, 0, 127, 206, 207, 200, 201, 0, 232,
	0, 0, 191, 198, 0, 161, 0, 0, 0, 0,
	0, 222, 223, 278, 176, 252, 288, 291, 0, 0,
	295, 0, 0, 254, 259, 0, 278, 112, 103, 140,
	193, 127, 127, -2, 202, 0, 0, 152, 0, 162,
	165, 127, 233, 127, 0, 393, 394, 0, 0, 175,
	0, 386, 253, 293, 0, 386, 260, 0, 262, 0,
	0, 272, 0, 0, 271, 57, -2, 307, 0, -2,
	127, 196, 0, 0, 0, 0, 390, 391, 395, 224,
	289, 292, 0, 386, 0, 261, 263, 264, 265, 0,
	0, 0, 0, 0, 127, 163, 170, 384, 0, 294,
	296, -2, 266, 267, 268, 270, 273, 194, 385, 0,
	392, 0, 269, 160, 232, 0, 255, 274, 127, 0,
	275,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 154, 140, 3, 157, 164, 151, 3,
	146, 147, 162, 153, 158, 152, 167, 163, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 145, 144,
	165, 160, 166, 150, 156, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 148, 3, 149, 161, 3, 141, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 142, 159, 143, 155,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

// line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:259
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yylex.(*Parser).CurrentToken.HiddenTokens)

			root := ast.Node{
				Type:     ast.NodeTypeRoot,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(root),
			)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:282
		{
			yyVAL.token = yyDollar[1].token
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:282
		{
			yyVAL.token = yyDollar[1].token
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:282
		{
			yyVAL.token = yyDollar[1].token
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:282
		{
			yyVAL.token = yyDollar[1].token
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:282
		{
			yyVAL.token = yyDollar[1].token
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:282
		{
			yyVAL.token = yyDollar[1].token
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:282
		{
			yyVAL.token = yyDollar[1].token
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:282
		{
			yyVAL.token = yyDollar[1].token
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:283
		{
			yyVAL.token = yyDollar[1].token
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:283
		{
			yyVAL.token = yyDollar[1].token
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:283
		{
			yyVAL.token = yyDollar[1].token
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:283
		{
			yyVAL.token = yyDollar[1].token
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:283
		{
			yyVAL.token = yyDollar[1].token
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:283
		{
			yyVAL.token = yyDollar[1].token
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:283
		{
			yyVAL.token = yyDollar[1].token
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:283
		{
			yyVAL.token = yyDollar[1].token
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:283
		{
			yyVAL.token = yyDollar[1].token
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:283
		{
			yyVAL.token = yyDollar[1].token
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:283
		{
			yyVAL.token = yyDollar[1].token
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:283
		{
			yyVAL.token = yyDollar[1].token
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:284
		{
			yyVAL.token = yyDollar[1].token
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:284
		{
			yyVAL.token = yyDollar[1].token
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:284
		{
			yyVAL.token = yyDollar[1].token
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:284
		{
			yyVAL.token = yyDollar[1].token
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:284
		{
			yyVAL.token = yyDollar[1].token
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:284
		{
			yyVAL.token = yyDollar[1].token
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:284
		{
			yyVAL.token = yyDollar[1].token
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:284
		{
			yyVAL.token = yyDollar[1].token
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:284
		{
			yyVAL.token = yyDollar[1].token
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:284
		{
			yyVAL.token = yyDollar[1].token
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:285
		{
			yyVAL.token = yyDollar[1].token
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:285
		{
			yyVAL.token = yyDollar[1].token
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:285
		{
			yyVAL.token = yyDollar[1].token
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:285
		{
			yyVAL.token = yyDollar[1].token
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:285
		{
			yyVAL.token = yyDollar[1].token
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:285
		{
			yyVAL.token = yyDollar[1].token
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:285
		{
			yyVAL.token = yyDollar[1].token
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:285
		{
			yyVAL.token = yyDollar[1].token
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:285
		{
			yyVAL.token = yyDollar[1].token
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:285
		{
			yyVAL.token = yyDollar[1].token
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:286
		{
			yyVAL.token = yyDollar[1].token
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:286
		{
			yyVAL.token = yyDollar[1].token
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:286
		{
			yyVAL.token = yyDollar[1].token
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:286
		{
			yyVAL.token = yyDollar[1].token
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:286
		{
			yyVAL.token = yyDollar[1].token
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:286
		{
			yyVAL.token = yyDollar[1].token
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:286
		{
			yyVAL.token = yyDollar[1].token
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:286
		{
			yyVAL.token = yyDollar[1].token
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:286
		{
			yyVAL.token = yyDollar[1].token
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:286
		{
			yyVAL.token = yyDollar[1].token
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:286
		{
			yyVAL.token = yyDollar[1].token
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:287
		{
			yyVAL.token = yyDollar[1].token
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:287
		{
			yyVAL.token = yyDollar[1].token
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:287
		{
			yyVAL.token = yyDollar[1].token
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:287
		{
			yyVAL.token = yyDollar[1].token
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:287
		{
			yyVAL.token = yyDollar[1].token
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:287
		{
			yyVAL.token = yyDollar[1].token
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:287
		{
			yyVAL.token = yyDollar[1].token
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:287
		{
			yyVAL.token = yyDollar[1].token
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:288
		{
			yyVAL.token = yyDollar[1].token
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:288
		{
			yyVAL.token = yyDollar[1].token
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:288
		{
			yyVAL.token = yyDollar[1].token
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:288
		{
			yyVAL.token = yyDollar[1].token
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:288
		{
			yyVAL.token = yyDollar[1].token
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:288
		{
			yyVAL.token = yyDollar[1].token
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:288
		{
			yyVAL.token = yyDollar[1].token
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:288
		{
			yyVAL.token = yyDollar[1].token
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:293
		{
			yyVAL.token = yyDollar[1].token
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:301
		{
			yyVAL.token = yyDollar[1].token
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:305
		{
			yyVAL.token = yyDollar[1].token
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:312
		{
			if yyDollar[2].node.Type != 0 {
				yylex.(*Parser).List.Add(yyDollar[2].node)
			}

			// TODO
			// if inlineHtmlNode, ok := $2.(*stmt.InlineHtml); ok && len($1) > 0 {
			//     prevNode := lastNode($1)
			//     yylex.(*Parser).splitSemiColonAndPhpCloseTag(inlineHtmlNode, prevNode)
			// }

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:326
		{
			yylex.(*Parser).List.Push()

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:335
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			namePartNode := ast.Node{
				Type:     ast.NodeTypeNameNamePart,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Push()
			yylex.(*Parser).List.Add(namePartNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:350
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[2].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)

			namePartNode := ast.Node{
				Type:     ast.NodeTypeNameNamePart,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Add(namePartNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:369
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupParts),
			)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeNameName,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:384
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupParts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupNamespace, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeNameRelative,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:402
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupParts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeNameFullyQualified,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:422
		{
			// error
			yyVAL.node = ast.Node{}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:429
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:435
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:441
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:447
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:453
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:459
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupHaltCompiller, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupOpenParenthesisToken, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCloseParenthesisToken, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[4].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtHaltCompiler,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:475
		{
			// namespace name

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupParts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[3].token.HiddenTokens)

			nameNode := ast.Node{
				Type:     ast.NodeTypeNameName,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupNamespaceName,
			}

			// namespace

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(nameNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtNamespace,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		// line internal/parser/php7/php7.y:511
		{
			childrenStmts := yylex.(*Parser).List.Pop(ast.NodeGroupStmts)
			childrenNameParts := yylex.(*Parser).List.Pop(ast.NodeGroupParts)

			// namespace name

			children := yylex.(*Parser).Ast.AddNodes(
				childrenNameParts,
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[3].token.HiddenTokens)

			nameNode := ast.Node{
				Type:     ast.NodeTypeNameName,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupNamespaceName,
			}

			// namespace

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(nameNode),
				childrenStmts,
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[5].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtNamespace,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[5].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:551
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupNamespace, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[4].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtNamespace,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:570
		{
			yyVAL.node = yyDollar[2].node

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupUseDeclarationList, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node.Position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil)
			yyVAL.node.Tokens = yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens())

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:583
		{
			yyDollar[2].node.Group = ast.NodeGroupUseType

			yyVAL.node = yyDollar[3].node

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupUseDeclarationList, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[4].token})

			yyVAL.node.Position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil)
			yyVAL.node.Tokens = yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens())
			yyVAL.node.Children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
				yylex.(*Parser).List.Pop(ast.NodeGroupPrefix, ast.NodeGroupUseList),
			)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:602
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupUses),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupUseDeclarationList, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtUseList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:621
		{
			yyDollar[2].node.Group = ast.NodeGroupUseType

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
				yylex.(*Parser).List.Pop(ast.NodeGroupUses),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupUseDeclarationList, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[4].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtUseList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:643
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupConsts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtConstList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:665
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:675
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
		// line internal/parser/php7/php7.y:688
		{
			childrenUseDeclarations := yylex.(*Parser).List.Pop(ast.NodeGroupUseList)
			childrenNameParts := yylex.(*Parser).List.Pop(ast.NodeGroupParts)

			// name

			children := yylex.(*Parser).Ast.AddNodes(
				childrenNameParts,
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[2].token.HiddenTokens)

			nameNode := ast.Node{
				Type:     ast.NodeTypeNameName,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupPrefix,
			}

			// GroupUse

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtGroupUse,
				Position: yylex.(*Parser).NewPosition(childrenNameParts, []*scanner.Token{yyDollar[6].token}, nil),
				Children: children,
			}

			// push children

			yylex.(*Parser).List.Push()
			yylex.(*Parser).List.Add(childrenUseDeclarations...)
			yylex.(*Parser).List.Push()
			yylex.(*Parser).List.Add(nameNode)

			// push tokens

			yylex.(*Parser).PushTokens(ast.TokenGroupSlash, yyDollar[3].token.HiddenTokens)
			if yyDollar[5].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[5].token.HiddenTokens)
				yylex.(*Parser).PushTokens(ast.TokenGroupStmts, []scanner.Token{*yyDollar[5].token})
			}
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[6].token.HiddenTokens)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 103:
		yyDollar = yyS[yypt-7 : yypt+1]
		// line internal/parser/php7/php7.y:735
		{
			childrenUseDeclarations := yylex.(*Parser).List.Pop(ast.NodeGroupUseList)
			childrenNameParts := yylex.(*Parser).List.Pop(ast.NodeGroupParts)

			// name

			children := yylex.(*Parser).Ast.AddNodes(
				childrenNameParts,
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[3].token.HiddenTokens)

			nameNode := ast.Node{
				Type:     ast.NodeTypeNameName,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupPrefix,
			}

			// GroupUse

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtGroupUse,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[7].token}, nil),
				Children: children,
			}

			// push children

			yylex.(*Parser).List.Push()
			yylex.(*Parser).List.Add(childrenUseDeclarations...)
			yylex.(*Parser).List.Push()
			yylex.(*Parser).List.Add(nameNode)

			// push tokens

			yylex.(*Parser).PushTokens(ast.TokenGroupUse, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupUse, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupSlash, yyDollar[4].token.HiddenTokens)
			if yyDollar[6].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[6].token.HiddenTokens)
				yylex.(*Parser).PushTokens(ast.TokenGroupStmts, []scanner.Token{*yyDollar[6].token})
			}
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[7].token.HiddenTokens)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 104:
		yyDollar = yyS[yypt-6 : yypt+1]
		// line internal/parser/php7/php7.y:787
		{
			childrenUseDeclarations := yylex.(*Parser).List.Pop(ast.NodeGroupUseList)
			childrenNameParts := yylex.(*Parser).List.Pop(ast.NodeGroupParts)

			// name

			children := yylex.(*Parser).Ast.AddNodes(
				childrenNameParts,
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[2].token.HiddenTokens)

			nameNode := ast.Node{
				Type:     ast.NodeTypeNameName,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupPrefix,
			}

			// GroupUse

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(nameNode),
				childrenUseDeclarations,
			)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtGroupUse,
				Position: yylex.(*Parser).NewPosition(childrenNameParts, []*scanner.Token{yyDollar[6].token}, nil),
				Children: children,
			}

			// push tokens

			yylex.(*Parser).PushTokens(ast.TokenGroupSlash, yyDollar[3].token.HiddenTokens)
			if yyDollar[5].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[5].token.HiddenTokens)
				yylex.(*Parser).PushTokens(ast.TokenGroupStmts, []scanner.Token{*yyDollar[5].token})
			}
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[6].token.HiddenTokens)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 105:
		yyDollar = yyS[yypt-7 : yypt+1]
		// line internal/parser/php7/php7.y:832
		{
			childrenUseDeclarations := yylex.(*Parser).List.Pop(ast.NodeGroupUseList)
			childrenNameParts := yylex.(*Parser).List.Pop(ast.NodeGroupParts)

			// name

			children := yylex.(*Parser).Ast.AddNodes(
				childrenNameParts,
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[3].token.HiddenTokens)

			nameNode := ast.Node{
				Type:     ast.NodeTypeNameName,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupPrefix,
			}

			// GroupUse

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(nameNode),
				childrenUseDeclarations,
			)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtGroupUse,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[7].token}, nil),
				Children: children,
			}

			// push tokens

			yylex.(*Parser).PushTokens(ast.TokenGroupUse, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupUse, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupSlash, yyDollar[4].token.HiddenTokens)
			if yyDollar[6].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[6].token.HiddenTokens)
				yylex.(*Parser).PushTokens(ast.TokenGroupStmts, []scanner.Token{*yyDollar[6].token})
			}
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[7].token.HiddenTokens)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:882
		{
			yyVAL.token = nil
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:886
		{
			yyVAL.token = yyDollar[1].token
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:892
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:893
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:899
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:907
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:908
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupAlias, ast.NodeGroupUse),
			)

			useNode := ast.Node{
				Type:     ast.NodeTypeStmtUse,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Add(useNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:925
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupAlias, ast.NodeGroupUse),
			)

			useNode := ast.Node{
				Type:     ast.NodeTypeStmtUse,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Push(useNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:944
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:945
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:951
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:960
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupAlias, ast.NodeGroupUse),
			)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtUse,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:975
		{
			yyDollar[1].node.Group = ast.NodeGroupUseType

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node),
				yylex.(*Parser).List.Pop(ast.NodeGroupAlias, ast.NodeGroupUse),
			)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtUse,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:996
		{
			// Name

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupParts),
			)

			nameNode := ast.Node{
				Type:     ast.NodeTypeNameName,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupUse,
			}

			yylex.(*Parser).List.Push(nameNode)

			// Alias

			yylex.(*Parser).List.Push()

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:1020
		{
			// Name

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupParts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[2].token.HiddenTokens)

			nameNode := ast.Node{
				Type:     ast.NodeTypeNameName,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupUse,
			}

			yylex.(*Parser).List.Push(nameNode)

			// Alias

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)

			aliasNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupAlias,
			}

			yylex.(*Parser).List.Push(aliasNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1058
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupAlias, ast.NodeGroupUse),
			)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtUse,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:1073
		{
			// Use

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupAlias, ast.NodeGroupUse),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSlash, []scanner.Token{*yyDollar[1].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtUse,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:1095
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:1096
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1102
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:1111
		{
			// TODO
			// if inlineHtmlNode, ok := $2.(*stmt.InlineHtml); ok && len($1) > 0 {
			//     prevNode := lastNode($1)
			//     yylex.(*Parser).splitSemiColonAndPhpCloseTag(inlineHtmlNode, prevNode)
			// }

			if yyDollar[2].node.Type != 0 {
				yylex.(*Parser).List.Add(yyDollar[2].node)
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:1125
		{
			yylex.(*Parser).List.Push()

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1134
		{
			// error
			yyVAL.node = ast.Node{}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1141
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1147
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1153
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1159
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1165
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:1171
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupHaltCompiller, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupOpenParenthesisToken, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCloseParenthesisToken, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[4].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtHaltCompiler,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:1189
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[3].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtStmtList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1207
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1213
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		// line internal/parser/php7/php7.y:1219
		{
			yyVAL.node = yylex.(*Parser).List.Pop(ast.NodeGroupNil)[0]
			statementNode := yylex.(*Parser).List.Pop(ast.NodeGroupStmt)[0]

			yyDollar[3].node.Group = ast.NodeGroupCond
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[3].node, statementNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupWhile, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)

			yyVAL.node.Children = children
			yyVAL.node.Position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, yylex.(*Parser).Nodes(yyVAL.node))
			yyVAL.node.Tokens = yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens())

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 139:
		yyDollar = yyS[yypt-7 : yypt+1]
		// line internal/parser/php7/php7.y:1239
		{
			yyDollar[2].node.Group = ast.NodeGroupStmt
			yyDollar[5].node.Group = ast.NodeGroupCond
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node, yyDollar[5].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupWhile, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[6].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCond, yyDollar[7].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[7].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtDo,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[7].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 140:
		yyDollar = yyS[yypt-9 : yypt+1]
		// line internal/parser/php7/php7.y:1263
		{
			yyVAL.node = yylex.(*Parser).List.Pop(ast.NodeGroupNil)[0]
			statementNode := yylex.(*Parser).List.Pop(ast.NodeGroupStmt)[0]

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupLoop, ast.NodeGroupCond, ast.NodeGroupInit),
				yylex.(*Parser).Nodes(statementNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupFor, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupInitExpr, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCondExpr, yyDollar[6].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupIncExpr, yyDollar[8].token.HiddenTokens)

			yyVAL.node.Children = children
			yyVAL.node.Position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, yylex.(*Parser).Nodes(yyVAL.node))
			yyVAL.node.Tokens = yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens())

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		// line internal/parser/php7/php7.y:1285
		{
			yyVAL.node = yylex.(*Parser).List.Pop(ast.NodeGroupNil)[0]
			caseListNode := yylex.(*Parser).List.Pop(ast.NodeGroupCaseList)[0]

			yyDollar[3].node.Group = ast.NodeGroupCond
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[3].node, caseListNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSwitch, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)

			yyVAL.node.Children = children
			yyVAL.node.Position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, yylex.(*Parser).Nodes(yyVAL.node))
			yyVAL.node.Tokens = yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens())

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:1305
		{
			var children []ast.Node

			if yyDollar[2].node.Type != ast.NodeTypeNil {
				yyDollar[2].node.Group = ast.NodeGroupExpr
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(yyDollar[2].node),
				)
			}

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtBreak,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:1329
		{
			var children []ast.Node

			if yyDollar[2].node.Type != ast.NodeTypeNil {
				yyDollar[2].node.Group = ast.NodeGroupExpr
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(yyDollar[2].node),
				)
			}

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtContinue,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:1353
		{
			var children []ast.Node

			if yyDollar[2].node.Type != ast.NodeTypeNil {
				yyDollar[2].node.Group = ast.NodeGroupExpr
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(yyDollar[2].node),
				)
			}

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtReturn,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:1377
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupVars),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVarList, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtGlobal,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:1396
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupVars),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVarList, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtStatic,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:1415
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupExprs),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEcho, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtEcho,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1435
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtInlineHtml,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:1447
		{
			yyDollar[1].node.Group = ast.NodeGroupExpr
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[2].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtExpression,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[2].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
		// line internal/parser/php7/php7.y:1466
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupVars),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupUnset, yyDollar[2].token.HiddenTokens)
			if yyDollar[4].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupVarList, yyDollar[4].token.HiddenTokens)
				yylex.(*Parser).PushTokens(ast.TokenGroupVarList, []scanner.Token{*yyDollar[4].token})
			}
			yylex.(*Parser).PushTokens(ast.TokenGroupVarList, yyDollar[5].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCloseParenthesisToken, yyDollar[6].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[6].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtUnset,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[6].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 151:
		yyDollar = yyS[yypt-7 : yypt+1]
		// line internal/parser/php7/php7.y:1491
		{
			yyVAL.node = yylex.(*Parser).List.Pop(ast.NodeGroupNil)[0]
			statementNode := yylex.(*Parser).List.Pop(ast.NodeGroupStmt)[0]

			yyDollar[3].node.Group = ast.NodeGroupExpr
			yyDollar[5].node.Group = ast.NodeGroupVar
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[3].node, yyDollar[5].node, statementNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupForeach, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[6].token.HiddenTokens)

			yyVAL.node.Children = children
			yyVAL.node.Position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, yylex.(*Parser).Nodes(yyVAL.node))
			yyVAL.node.Tokens = yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens())

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 152:
		yyDollar = yyS[yypt-9 : yypt+1]
		// line internal/parser/php7/php7.y:1513
		{
			yyVAL.node = yylex.(*Parser).List.Pop(ast.NodeGroupNil)[0]
			statementNode := yylex.(*Parser).List.Pop(ast.NodeGroupStmt)[0]

			yyDollar[3].node.Group = ast.NodeGroupExpr
			yyDollar[5].node.Group = ast.NodeGroupKey
			yyDollar[7].node.Group = ast.NodeGroupVar
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[3].node, yyDollar[5].node, yyDollar[7].node, statementNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupForeach, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupKey, yyDollar[6].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[8].token.HiddenTokens)

			yyVAL.node.Children = children
			yyVAL.node.Position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, yylex.(*Parser).Nodes(yyVAL.node))
			yyVAL.node.Tokens = yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens())

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		// line internal/parser/php7/php7.y:1537
		{
			yyVAL.node = yylex.(*Parser).List.Pop(ast.NodeGroupNil)[0]
			statementNode := yylex.(*Parser).List.Pop(ast.NodeGroupStmt)[0]

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupConsts),
				yylex.(*Parser).Nodes(statementNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupDeclare, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupConstList, yyDollar[4].token.HiddenTokens)

			yyVAL.node.Children = children
			yyVAL.node.Position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, yylex.(*Parser).Nodes(yyVAL.node))
			yyVAL.node.Tokens = yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens())

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1557
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[1].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtNop,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 155:
		yyDollar = yyS[yypt-6 : yypt+1]
		// line internal/parser/php7/php7.y:1570
		{
			var nodes []ast.Node

			if yyDollar[6].node.Type != ast.NodeTypeNil {
				yyDollar[6].node.Group = ast.NodeGroupFinally
				nodes = yylex.(*Parser).Nodes(yyDollar[6].node)
			}

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupCatches, ast.NodeGroupStmts), nodes,
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupTry, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[4].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtTry,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:1596
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtThrow,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:1616
		{
			// Identifier

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupLabel,
			}

			// Goto

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupLabel, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtGoto,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:1648
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Group:    ast.NodeGroupLabelName,
			}

			// Label

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupLabel, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtLabel,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[2].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:1678
		{
			yylex.(*Parser).List.Push()

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 160:
		yyDollar = yyS[yypt-9 : yypt+1]
		// line internal/parser/php7/php7.y:1684
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[5].token}, nil),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[5].token.HiddenTokens)

			variableNode := ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVar,
			}

			// catch

			statements := yylex.(*Parser).List.Pop(ast.NodeGroupStmts)
			types := yylex.(*Parser).List.Pop(ast.NodeGroupTypes)

			children = yylex.(*Parser).Ast.AddNodes(
				types, yylex.(*Parser).Nodes(variableNode), statements,
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCatch, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[6].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCond, yyDollar[7].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[9].token.HiddenTokens)

			catchNode := ast.Node{
				Type:     ast.NodeTypeStmtCatch,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token, yyDollar[9].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Add(catchNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1739
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:1744
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:1745
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:1754
		{
			yyVAL.node = ast.Node{}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:1760
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupFinally, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[4].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtFinally,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1782
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:1787
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:1788
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1797
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 170:
		yyDollar = yyS[yypt-11 : yypt+1]
		// line internal/parser/php7/php7.y:1806
		{
			// Identifier

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token}, nil),
				Group:    ast.NodeGroupFunctionName,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Function

			var children []ast.Node
			if yyDollar[8].node.Type == ast.NodeTypeNil {
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(identifierNode),
					yylex.(*Parser).List.Pop(ast.NodeGroupStmts, ast.NodeGroupParams),
				)
			} else {
				yyDollar[8].node.Group = ast.NodeGroupReturnType
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(identifierNode, yyDollar[8].node),
					yylex.(*Parser).List.Pop(ast.NodeGroupStmts, ast.NodeGroupParams),
				)
			}

			var flag ast.NodeFlag
			if yyDollar[2].token != nil {
				flag = flag | ast.NodeFlagRef
			}

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			if yyDollar[2].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupFunction, yyDollar[2].token.HiddenTokens)
			}
			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[5].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupParamList, yyDollar[7].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupReturnType, yyDollar[9].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[11].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtFunction,
				Flag:     flag,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[11].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:1862
		{
			yyVAL.token = nil
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1866
		{
			yyVAL.token = yyDollar[1].token
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:1873
		{
			yyVAL.token = nil
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1877
		{
			yyVAL.token = yyDollar[1].token
		}
	case 175:
		yyDollar = yyS[yypt-9 : yypt+1]
		// line internal/parser/php7/php7.y:1884
		{
			// Identifier

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token}, nil),
				Group:    ast.NodeGroupClassName,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Class

			childrenStmts := yylex.(*Parser).List.Pop(ast.NodeGroupStmts)
			childrenModifiers := yylex.(*Parser).List.Pop(ast.NodeGroupModifiers)

			nodes := make([]ast.Node, 0, 3)
			nodes = append(nodes, identifierNode)

			if yyDollar[4].node.Type != ast.NodeTypeNil {
				yyDollar[4].node.Group = ast.NodeGroupExtends
				nodes = append(nodes, yyDollar[4].node)
			}

			if yyDollar[5].node.Type != ast.NodeTypeNil {
				yyDollar[5].node.Group = ast.NodeGroupImplements
				nodes = append(nodes, yyDollar[5].node)
			}

			children := yylex.(*Parser).Ast.AddNodes(
				childrenModifiers, nodes, childrenStmts,
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupModifierList, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[7].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[9].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtClass,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[9].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 176:
		yyDollar = yyS[yypt-8 : yypt+1]
		// line internal/parser/php7/php7.y:1932
		{
			// Identifier

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, nil),
				Group:    ast.NodeGroupClassName,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Class

			nodes := make([]ast.Node, 0, 3)
			nodes = append(nodes, identifierNode)

			if yyDollar[3].node.Type != ast.NodeTypeNil {
				yyDollar[3].node.Group = ast.NodeGroupExtends
				nodes = append(nodes, yyDollar[3].node)
			}

			if yyDollar[4].node.Type != ast.NodeTypeNil {
				yyDollar[4].node.Group = ast.NodeGroupImplements
				nodes = append(nodes, yyDollar[4].node)
			}

			children := yylex.(*Parser).Ast.AddNodes(
				nodes,
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[6].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[8].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtClass,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[8].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1981
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:1987
		{
			yylex.(*Parser).List.Add(yyDollar[2].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:1996
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:2008
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 181:
		yyDollar = yyS[yypt-6 : yypt+1]
		// line internal/parser/php7/php7.y:2023
		{
			// Identifier

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, nil),
				Group:    ast.NodeGroupTraitName,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Trait

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[6].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtTrait,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[6].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
		// line internal/parser/php7/php7.y:2059
		{
			// Identifier

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, nil),
				Group:    ast.NodeGroupClassName,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Interface

			nodes := make([]ast.Node, 0, 3)
			nodes = append(nodes, identifierNode)

			if yyDollar[3].node.Type != ast.NodeTypeNil {
				yyDollar[3].node.Group = ast.NodeGroupExtends
				nodes = append(nodes, yyDollar[3].node)
			}

			children := yylex.(*Parser).Ast.AddNodes(
				nodes,
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[5].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[7].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtInterface,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[7].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:2103
		{
			yyVAL.node = ast.Node{}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:2109
		{
			yyDollar[2].node.Group = ast.NodeGroupClassName
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtClassExtends,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:2130
		{
			yyVAL.node = ast.Node{}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:2136
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupInterfaceNames),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtInterfaceExtends,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:2156
		{
			yyVAL.node = ast.Node{}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:2162
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupInterfaceNames),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtClassImplements,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:2182
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:2188
		{
			yyDollar[2].node.Group = ast.NodeGroupVar
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprReference,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:2206
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupItems),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupList, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupArrayPairList, yyDollar[4].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:2225
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupItems),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupArrayPairList, yyDollar[3].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprShortList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:2246
		{
			forNode := ast.Node{
				Type:     ast.NodeTypeStmtFor,
				Position: yylex.(*Parser).NewPosition(yylex.(*Parser).Nodes(yyDollar[1].node), nil, nil),
			}

			yylex.(*Parser).List.Push(yyDollar[1].node)
			yylex.(*Parser).List.Push(forNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:2258
		{
			// Statement

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			statementNode := ast.Node{
				Type:     ast.NodeTypeStmtStmtList,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
			}

			// While

			yylex.(*Parser).PushTokens(ast.TokenGroupCond, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupAltEnd, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[4].token})

			forNode := ast.Node{
				Type:     ast.NodeTypeStmtAltFor,
				Flag:     ast.NodeFlagAltSyntax,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
			}

			yylex.(*Parser).List.Push(statementNode)
			yylex.(*Parser).List.Push(forNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:2293
		{
			foreachNode := ast.Node{
				Type:     ast.NodeTypeStmtForeach,
				Position: yylex.(*Parser).NewPosition(yylex.(*Parser).Nodes(yyDollar[1].node), nil, nil),
			}

			yylex.(*Parser).List.Push(yyDollar[1].node)
			yylex.(*Parser).List.Push(foreachNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:2305
		{
			// Statement

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			statementNode := ast.Node{
				Type:     ast.NodeTypeStmtStmtList,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
			}

			// While

			yylex.(*Parser).PushTokens(ast.TokenGroupCond, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupAltEnd, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[4].token})

			foreachNode := ast.Node{
				Type:     ast.NodeTypeStmtAltForeach,
				Flag:     ast.NodeFlagAltSyntax,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
			}

			yylex.(*Parser).List.Push(statementNode)
			yylex.(*Parser).List.Push(foreachNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:2340
		{
			declareNode := ast.Node{
				Type:     ast.NodeTypeStmtDeclare,
				Position: yylex.(*Parser).NewPosition(yylex.(*Parser).Nodes(yyDollar[1].node), nil, nil),
			}

			yylex.(*Parser).List.Push(yyDollar[1].node)
			yylex.(*Parser).List.Push(declareNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:2352
		{
			// Statement

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			statementNode := ast.Node{
				Type:     ast.NodeTypeStmtStmtList,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
			}

			// While

			yylex.(*Parser).PushTokens(ast.TokenGroupCond, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupAltEnd, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[4].token})

			declareNode := ast.Node{
				Type:     ast.NodeTypeStmtDeclare,
				Flag:     ast.NodeFlagAltSyntax,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
			}

			yylex.(*Parser).List.Push(statementNode)
			yylex.(*Parser).List.Push(declareNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:2387
		{
			// CaseList

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupCases),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCaseListEnd, yyDollar[3].token.HiddenTokens)

			caseListNode := ast.Node{
				Type:     ast.NodeTypeStmtCaseList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Switch

			switchNode := ast.Node{
				Type:     ast.NodeTypeStmtSwitch,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
			}

			yylex.(*Parser).List.Push(caseListNode)
			yylex.(*Parser).List.Push(switchNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:2417
		{
			// CaseList

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupCases),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCaseListStart, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCaseListStart, []scanner.Token{*yyDollar[2].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupCaseListEnd, yyDollar[4].token.HiddenTokens)

			caseListNode := ast.Node{
				Type:     ast.NodeTypeStmtCaseList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Switch

			switchNode := ast.Node{
				Type:     ast.NodeTypeStmtSwitch,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
			}

			yylex.(*Parser).List.Push(caseListNode)
			yylex.(*Parser).List.Push(switchNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:2449
		{
			// CaseList

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupCases),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupCaseListEnd, yyDollar[3].token.HiddenTokens)

			caseListNode := ast.Node{
				Type:     ast.NodeTypeStmtCaseList,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Switch

			yylex.(*Parser).PushTokens(ast.TokenGroupCond, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupAltEnd, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[4].token})

			switchNode := ast.Node{
				Type:     ast.NodeTypeStmtSwitch,
				Flag:     ast.NodeFlagAltSyntax,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
			}

			yylex.(*Parser).List.Push(caseListNode)
			yylex.(*Parser).List.Push(switchNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		// line internal/parser/php7/php7.y:2483
		{
			// CaseList

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupCases),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupCaseListStart, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCaseListStart, []scanner.Token{*yyDollar[2].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupCaseListEnd, yyDollar[4].token.HiddenTokens)

			caseListNode := ast.Node{
				Type:     ast.NodeTypeStmtCaseList,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Switch

			yylex.(*Parser).PushTokens(ast.TokenGroupCond, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupAltEnd, yyDollar[5].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[5].token})

			switchNode := ast.Node{
				Type:     ast.NodeTypeStmtSwitch,
				Flag:     ast.NodeFlagAltSyntax,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[1].token, yyDollar[5].token}, nil),
			}

			yylex.(*Parser).List.Push(caseListNode)
			yylex.(*Parser).List.Push(switchNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:2522
		{
			yylex.(*Parser).List.Push()

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		// line internal/parser/php7/php7.y:2528
		{
			yyDollar[3].node.Group = ast.NodeGroupExpr
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[3].node),
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCaseSeparator, []scanner.Token{*yyDollar[4].token})

			caseNode := ast.Node{
				Type:     ast.NodeTypeStmtCase,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Add(caseNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:2551
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupDefault, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCaseSeparator, []scanner.Token{*yyDollar[3].token})

			caseNode := ast.Node{
				Type:     ast.NodeTypeStmtDefault,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Add(caseNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:2575
		{
			yyVAL.token = yyDollar[1].token
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:2579
		{
			yyVAL.token = yyDollar[1].token
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:2586
		{
			whileNode := ast.Node{
				Type:     ast.NodeTypeStmtWhile,
				Position: yylex.(*Parser).NewPosition(yylex.(*Parser).Nodes(yyDollar[1].node), nil, nil),
			}

			yylex.(*Parser).List.Push(yyDollar[1].node)
			yylex.(*Parser).List.Push(whileNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:2598
		{
			// Statement

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			statementNode := ast.Node{
				Type:     ast.NodeTypeStmtStmtList,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
			}

			// While

			yylex.(*Parser).PushTokens(ast.TokenGroupCond, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupAltEnd, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[4].token})

			whileNode := ast.Node{
				Type:     ast.NodeTypeStmtWhile,
				Flag:     ast.NodeFlagAltSyntax,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
			}

			yylex.(*Parser).List.Push(statementNode)
			yylex.(*Parser).List.Push(whileNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
		// line internal/parser/php7/php7.y:2633
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupIf, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)

			ifNode := ast.Node{
				Type:     ast.NodeTypeStmtIf,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Push(ifNode)
			yylex.(*Parser).List.Push(yyDollar[3].node)
			yylex.(*Parser).List.Push(yyDollar[5].node)
			yylex.(*Parser).List.Push()

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 211:
		yyDollar = yyS[yypt-6 : yypt+1]
		// line internal/parser/php7/php7.y:2652
		{
			yyDollar[4].node.Group = ast.NodeGroupCond
			yyDollar[6].node.Group = ast.NodeGroupStmt

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[4].node, yyDollar[6].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupElseIf, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[5].token.HiddenTokens)

			elseIfNode := ast.Node{
				Type:     ast.NodeTypeStmtElseIf,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Add(elseIfNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:2679
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupElseIf, ast.NodeGroupStmt, ast.NodeGroupCond),
			)

			yyVAL.node = yylex.(*Parser).List.Pop(ast.NodeGroupNil)[0]

			yyVAL.node.Position = yylex.(*Parser).NewPosition(yylex.(*Parser).Nodes(yyVAL.node), nil, children)
			yyVAL.node.Children = children

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:2692
		{
			// Else

			yyDollar[3].node.Group = ast.NodeGroupStmt

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)

			elseNode := ast.Node{
				Type:     ast.NodeTypeStmtElse,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupElse,
			}

			// If

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupElseIf, ast.NodeGroupStmt, ast.NodeGroupCond),
				yylex.(*Parser).Nodes(elseNode),
			)

			yyVAL.node = yylex.(*Parser).List.Pop(ast.NodeGroupNil)[0]

			yyVAL.node.Position = yylex.(*Parser).NewPosition(yylex.(*Parser).Nodes(yyVAL.node), nil, children)
			yyVAL.node.Children = children

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
		// line internal/parser/php7/php7.y:2729
		{
			// Statement

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			stmtNode := ast.Node{
				Type:     ast.NodeTypeStmtStmtList,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Group:    ast.NodeGroupStmt,
			}

			// Alt if

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupIf, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCond, yyDollar[5].token.HiddenTokens)

			ifNode := ast.Node{
				Type:     ast.NodeTypeStmtAltIf,
				Flag:     ast.NodeFlagAltSyntax,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Push(ifNode)
			yylex.(*Parser).List.Push(yyDollar[3].node)
			yylex.(*Parser).List.Push(stmtNode)
			yylex.(*Parser).List.Push()

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 215:
		yyDollar = yyS[yypt-7 : yypt+1]
		// line internal/parser/php7/php7.y:2765
		{
			// Statement

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			stmtNode := ast.Node{
				Type:     ast.NodeTypeStmtStmtList,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Group:    ast.NodeGroupStmt,
			}

			// Alt else if

			yyDollar[4].node.Group = ast.NodeGroupCond

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[4].node, stmtNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupElseIf, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[5].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCond, yyDollar[6].token.HiddenTokens)

			elseIfNode := ast.Node{
				Type:     ast.NodeTypeStmtAltElseIf,
				Flag:     ast.NodeFlagAltSyntax,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, children),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Add(elseIfNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:2807
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupElseIf, ast.NodeGroupStmt, ast.NodeGroupCond),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupAltEnd, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = yylex.(*Parser).List.Pop(ast.NodeGroupNil)[0]

			yyVAL.node.Position = yylex.(*Parser).NewPosition(yylex.(*Parser).Nodes(yyVAL.node), []*scanner.Token{yyDollar[3].token}, nil)
			yyVAL.node.Children = children

			// TODO: rewrite to prevent memory allocations
			yyVAL.node.Tokens = append(
				yyVAL.node.Tokens,
				yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens())...,
			)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
		// line internal/parser/php7/php7.y:2830
		{
			// Statement

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			stmtNode := ast.Node{
				Type:     ast.NodeTypeStmtStmtList,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Group:    ast.NodeGroupStmt,
			}

			// Alt else

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(stmtNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupElse, yyDollar[3].token.HiddenTokens)

			elseNode := ast.Node{
				Type:     ast.NodeTypeStmtAltElse,
				Flag:     ast.NodeFlagAltSyntax,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, children),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupElse,
			}

			// If

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupElseIf, ast.NodeGroupStmt, ast.NodeGroupCond),
				yylex.(*Parser).Nodes(elseNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[5].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupAltEnd, yyDollar[6].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[6].token})

			yyVAL.node = yylex.(*Parser).List.Pop(ast.NodeGroupNil)[0]

			yyVAL.node.Position = yylex.(*Parser).NewPosition(yylex.(*Parser).Nodes(yyVAL.node), []*scanner.Token{yyDollar[6].token}, nil)
			yyVAL.node.Children = children

			// TODO: rewrite to prevent memory allocations
			yyVAL.node.Tokens = append(
				yyVAL.node.Tokens,
				yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens())...,
			)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:2889
		{
			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:2893
		{
			yylex.(*Parser).List.Push()

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:2902
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:2907
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:2908
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:2917
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[4].token}, nil),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			var children []ast.Node
			if yyDollar[1].node.Type != ast.NodeTypeNil {
				yyDollar[1].node.Group = ast.NodeGroupVarType
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(yyDollar[1].node, identifierNode),
				)
			} else {
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(identifierNode),
				)
			}

			var f bool
			if yyDollar[1].node.Type != ast.NodeTypeNil {
				f = true
			}

			if f && yyDollar[2].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupOptionalType, yyDollar[2].token.HiddenTokens)
				f = true
			} else if yyDollar[2].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)
				f = true
			}

			if f && yyDollar[3].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupAmpersand, yyDollar[3].token.HiddenTokens)
				f = true
			} else if yyDollar[3].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)
				f = true
			}

			if f {
				yylex.(*Parser).PushTokens(ast.TokenGroupVariadic, yyDollar[4].token.HiddenTokens)
				f = true
			} else {
				yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[4].token.HiddenTokens)
				f = true
			}

			var position ast.Position
			if yyDollar[1].node.Type != ast.NodeTypeNil {
				position = yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[4].token}, nil)
			} else if yyDollar[2].token != nil {
				position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token, yyDollar[4].token}, nil)
			} else if yyDollar[3].token != nil {
				position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token, yyDollar[4].token}, nil)
			} else {
				position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[4].token}, nil)
			}

			var flag ast.NodeFlag
			if yyDollar[2].token != nil {
				flag = flag | ast.NodeFlagRef
			}
			if yyDollar[3].token != nil {
				flag = flag | ast.NodeFlagVariadic
			}

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeParameter,
				Flag:     flag,
				Position: position,
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
		// line internal/parser/php7/php7.y:2999
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[4].token}, nil),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			yyDollar[6].node.Group = ast.NodeGroupDefaultValue
			var children []ast.Node
			if yyDollar[1].node.Type != ast.NodeTypeNil {
				yyDollar[1].node.Group = ast.NodeGroupVarType
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(yyDollar[1].node, identifierNode, yyDollar[6].node),
				)
			} else {
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(identifierNode, yyDollar[6].node),
				)
			}

			var f bool
			if yyDollar[1].node.Type != ast.NodeTypeNil {
				f = true
			}

			if f && yyDollar[2].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupOptionalType, yyDollar[2].token.HiddenTokens)
				f = true
			} else if yyDollar[2].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)
				f = true
			}

			if f && yyDollar[3].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupAmpersand, yyDollar[3].token.HiddenTokens)
				f = true
			} else if yyDollar[3].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)
				f = true
			}

			if f {
				yylex.(*Parser).PushTokens(ast.TokenGroupVariadic, yyDollar[4].token.HiddenTokens)
				f = true
			} else {
				yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[4].token.HiddenTokens)
				f = true
			}
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[5].token.HiddenTokens)

			var position ast.Position
			if yyDollar[1].node.Type != ast.NodeTypeNil {
				position = yylex.(*Parser).NewPosition(children, nil, nil)
			} else if yyDollar[2].token != nil {
				position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, children)
			} else if yyDollar[3].token != nil {
				position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token}, children)
			} else {
				position = yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[4].token}, children)
			}

			var flag ast.NodeFlag
			if yyDollar[2].token != nil {
				flag = flag | ast.NodeFlagRef
			}
			if yyDollar[3].token != nil {
				flag = flag | ast.NodeFlagVariadic
			}

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeParameter,
				Flag:     flag,
				Position: position,
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:3086
		{
			yyVAL.node = ast.Node{}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3092
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3101
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3107
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeNullable,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3129
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3141
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3153
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:3162
		{
			yyVAL.node = ast.Node{}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3168
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtReturnType,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3190
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupArgumentList, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeArgumentList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[2].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:3203
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupArguments),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			if yyDollar[3].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupArgumentList, yyDollar[3].token.HiddenTokens)
				yylex.(*Parser).PushTokens(ast.TokenGroupArgumentList, []scanner.Token{*yyDollar[3].token})
			}
			yylex.(*Parser).PushTokens(ast.TokenGroupArgumentList, yyDollar[4].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeArgumentList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3228
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3233
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:3234
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3243
		{
			yyDollar[1].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node),
			)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeArgument,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3260
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeArgument,
				Flag:     ast.NodeFlagVariadic,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3282
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:3283
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3289
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3298
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3306
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:3307
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3313
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3322
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			variableNode := ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Group:    ast.NodeGroupVar,
			}

			// Static var

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(variableNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtStaticVar,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:3362
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			variableNode := ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Group:    ast.NodeGroupVar,
			}

			// Property

			yyDollar[3].node.Group = ast.NodeGroupExpr
			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(variableNode, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtStaticVar,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3407
		{
			yylex.(*Parser).List.Add(yyDollar[2].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:3413
		{
			yylex.(*Parser).List.Push()

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:3422
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupProperties, ast.NodeGroupModifiers),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupPropertyList, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtPropertyList,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:3440
		{
			childrenConstants := yylex.(*Parser).List.Pop(ast.NodeGroupConsts)
			childrenModifiers := yylex.(*Parser).List.Pop(ast.NodeGroupModifiers)

			children := yylex.(*Parser).Ast.AddNodes(
				childrenModifiers, childrenConstants,
			)

			if len(childrenModifiers) > 0 {
				yylex.(*Parser).PushTokens(ast.TokenGroupModifierList, yyDollar[2].token.HiddenTokens)
			} else {
				yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)
			}
			yylex.(*Parser).PushTokens(ast.TokenGroupConstList, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[4].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtClassConstList,
				Position: yylex.(*Parser).NewPosition(childrenModifiers, []*scanner.Token{yyDollar[2].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:3466
		{
			yyDollar[3].node.Group = ast.NodeGroupTraitAdaptationList
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupTraits),
				yylex.(*Parser).Nodes(yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtTraitUse,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 255:
		yyDollar = yyS[yypt-10 : yypt+1]
		// line internal/parser/php7/php7.y:3485
		{
			// Identifier

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[4].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[4].token}, nil),
				Group:    ast.NodeGroupMethodName,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Class method

			childrenParams := yylex.(*Parser).List.Pop(ast.NodeGroupParams)
			childrenModifiers := yylex.(*Parser).List.Pop(ast.NodeGroupModifiers)

			nodes := make([]ast.Node, 0, 2)
			if yyDollar[9].node.Type != ast.NodeTypeNil {
				nodes = append(nodes, yyDollar[9].node)
				yyDollar[9].node.Group = ast.NodeGroupReturnType
			}

			yyDollar[10].node.Group = ast.NodeGroupStmt
			nodes = append(nodes, yyDollar[10].node)

			children := yylex.(*Parser).Ast.AddNodes(
				childrenModifiers, yylex.(*Parser).Nodes(identifierNode), childrenParams, nodes,
			)

			if len(childrenModifiers) > 0 {
				yylex.(*Parser).PushTokens(ast.TokenGroupModifierList, yyDollar[2].token.HiddenTokens)
			} else {
				yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)
			}
			if yyDollar[3].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupFunction, yyDollar[3].token.HiddenTokens)
			}
			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[6].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupParameterList, yyDollar[8].token.HiddenTokens)

			var flag ast.NodeFlag
			if yyDollar[3].token != nil {
				flag = flag | ast.NodeFlagRef
			}

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtClassMethod,
				Flag:     flag,
				Position: yylex.(*Parser).NewPosition(childrenModifiers, []*scanner.Token{yyDollar[2].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3545
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3550
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:3551
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3560
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[1].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtNop,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3573
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupAdaptationList, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtTraitAdaptationList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[2].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:3586
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupAdaptations),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupAdaptationList, yyDollar[3].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtTraitAdaptationList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3607
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3613
		{
			yylex.(*Parser).List.Add(yyDollar[2].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3622
		{
			yyDollar[1].node.Group = ast.NodeGroupStmt
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[2].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeWrapper,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[2].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3641
		{
			yyDollar[1].node.Group = ast.NodeGroupStmt
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[2].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeWrapper,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[2].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:3663
		{
			yyDollar[1].node.Group = ast.NodeGroupRef
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node),
				yylex.(*Parser).List.Pop(ast.NodeGroupInsteadof),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupRef, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtTraitUsePrecedence,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:3685
		{
			// Identifier

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token}, nil),
				Group:    ast.NodeGroupAlias,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Alias

			yyDollar[1].node.Group = ast.NodeGroupRef
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupRef, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtTraitUseAlias,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:3716
		{
			// Identifier

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token}, nil),
				Group:    ast.NodeGroupAlias,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Alias

			yyDollar[1].node.Group = ast.NodeGroupRef
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupRef, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtTraitUseAlias,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:3747
		{
			// Identifier

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[4].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[4].token}, nil),
				Group:    ast.NodeGroupAlias,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Alias

			yyDollar[1].node.Group = ast.NodeGroupRef
			yyDollar[3].node.Group = ast.NodeGroupModifier
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node, identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupRef, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtTraitUseAlias,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:3779
		{

			yyDollar[1].node.Group = ast.NodeGroupRef
			yyDollar[3].node.Group = ast.NodeGroupModifier
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupRef, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtTraitUseAlias,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3802
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Group:    ast.NodeGroupMethod,
			}

			// Trait reference

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtTraitMethodRef,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3829
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:3838
		{
			// Identifier

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token}, nil),
				Group:    ast.NodeGroupMethod,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			// Trait reference

			yyDollar[1].node.Group = ast.NodeGroupTrait
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtTraitMethodRef,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3872
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupSemiColon, []scanner.Token{*yyDollar[1].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtNop,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:3885
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[3].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtStmtList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3906
		{
			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3910
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Push(identifierNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:3927
		{
			yylex.(*Parser).List.Push()

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3933
		{
			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3940
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:3946
		{
			yylex.(*Parser).List.Add(yyDollar[2].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3955
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3967
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3979
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:3991
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:4003
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:4015
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:4029
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:4030
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:4036
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:4045
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			variableNode := ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Group:    ast.NodeGroupVar,
			}

			// Property

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(variableNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtProperty,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:4085
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			variableNode := ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Group:    ast.NodeGroupVar,
			}

			// Property

			yyDollar[3].node.Group = ast.NodeGroupExpr
			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(variableNode, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtProperty,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:4129
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:4130
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:4136
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:4145
		{
			// identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupConstantName,
			}

			// const

			yyDollar[3].node.Group = ast.NodeGroupExpr
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtConstant,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:4178
		{
			// identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupConstantName,
			}

			// const

			yyDollar[3].node.Group = ast.NodeGroupExpr
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtConstant,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:4210
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:4211
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:4217
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:4226
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:4235
		{
			yylex.(*Parser).List.Push()

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:4241
		{
			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:4247
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:4248
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:4254
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 307:
		yyDollar = yyS[yypt-8 : yypt+1]
		// line internal/parser/php7/php7.y:4263
		{
			nodes := make([]ast.Node, 0, 3)

			if yyDollar[2].node.Type != ast.NodeTypeNil {
				yyDollar[2].node.Group = ast.NodeGroupArgumentList
				nodes = append(nodes, yyDollar[2].node)
			}

			if yyDollar[3].node.Type != ast.NodeTypeNil {
				yyDollar[3].node.Group = ast.NodeGroupExtends
				nodes = append(nodes, yyDollar[3].node)
			}

			if yyDollar[4].node.Type != ast.NodeTypeNil {
				yyDollar[4].node.Group = ast.NodeGroupImplements
				nodes = append(nodes, yyDollar[4].node)
			}

			children := yylex.(*Parser).Ast.AddNodes(
				nodes, yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[6].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[8].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeStmtClass,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[8].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4302
		{
			nodes := make([]ast.Node, 0, 2)

			yyDollar[2].node.Group = ast.NodeGroupClass
			nodes = append(nodes, yyDollar[2].node)

			if yyDollar[3].node.Type != ast.NodeTypeNil {
				yyDollar[3].node.Group = ast.NodeGroupArgumentList
				nodes = append(nodes, yyDollar[3].node)
			}

			children := yylex.(*Parser).Ast.AddNodes(
				nodes,
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprNew,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:4329
		{
			yyDollar[2].node.Group = ast.NodeGroupClass

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprNew,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
		// line internal/parser/php7/php7.y:4351
		{
			// Array pair list

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupItems),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupList, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupArrayPairList, yyDollar[4].token.HiddenTokens)

			listNode := ast.Node{
				Type:     ast.NodeTypeExprList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVar,
			}

			// Assign

			yyDollar[6].node.Group = ast.NodeGroupExpr

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(listNode, yyDollar[6].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[5].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignAssign,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
		// line internal/parser/php7/php7.y:4390
		{
			// Array pair list

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupItems),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupArrayPairList, yyDollar[3].token.HiddenTokens)

			listNode := ast.Node{
				Type:     ast.NodeTypeExprShortList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVar,
			}

			// Assign

			yyDollar[5].node.Group = ast.NodeGroupExpr

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(listNode, yyDollar[5].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[4].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignAssign,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4428
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignAssign,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:4448
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[4].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[4].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEqual, yyDollar[3].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignReference,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:4469
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprClone,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4488
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignPlus,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4508
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignMinus,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4528
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignMul,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4548
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignPow,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4568
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignDiv,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4588
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignConcat,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4608
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignMod,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4628
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignBitwiseAnd,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4648
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignBitwiseOr,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4668
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignBitwiseXor,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4688
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignShiftLeft,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4708
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeAssignShiftRight,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:4728
		{
			yyDollar[1].node.Group = ast.NodeGroupVar

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprPostInc,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[2].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:4747
		{
			yyDollar[2].node.Group = ast.NodeGroupVar

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprPreInc,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:4766
		{
			yyDollar[1].node.Group = ast.NodeGroupVar

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprPostDec,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[2].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:4785
		{
			yyDollar[2].node.Group = ast.NodeGroupVar

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprPreDec,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4804
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryBooleanOr,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4824
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryBooleanAnd,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4844
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryLogicalOr,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4864
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryLogicalAnd,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4884
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryLogicalXor,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4904
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryBitwiseOr,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4924
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryBitwiseAnd,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4944
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryBitwiseXor,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4964
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryConcat,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:4984
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryPlus,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5004
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryMinus,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5024
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryMul,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5044
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryPow,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5064
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryDiv,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5084
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryMod,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5104
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryShiftLeft,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5124
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryShiftRight,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5144
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprUnaryPlus,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5163
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprUnaryMinus,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5182
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprBooleanNot,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5201
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprBitwiseNot,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5220
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryIdentical,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5240
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryNotIdentical,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5260
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryEqual,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5280
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEqual, []scanner.Token{*yyDollar[2].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryNotEqual,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5301
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinarySmaller,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5321
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinarySmallerOrEqual,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5341
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryGreater,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5361
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryGreaterOrEqual,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5381
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinarySpaceship,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5401
		{
			yyDollar[1].node.Group = ast.NodeGroupExpr
			yyDollar[3].node.Group = ast.NodeGroupClass

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprInstanceOf,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5421
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeWrapper,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:5443
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 364:
		yyDollar = yyS[yypt-5 : yypt+1]
		// line internal/parser/php7/php7.y:5449
		{
			yyDollar[1].node.Group = ast.NodeGroupCond
			yyDollar[3].node.Group = ast.NodeGroupIfTrue
			yyDollar[5].node.Group = ast.NodeGroupIfFalse

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupCond, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupTrue, yyDollar[4].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprTernary,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:5471
		{
			yyDollar[1].node.Group = ast.NodeGroupCond
			yyDollar[4].node.Group = ast.NodeGroupIfFalse

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[4].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupCond, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupTrue, yyDollar[3].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprTernary,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5492
		{
			yyDollar[1].node.Group = ast.NodeGroupLeft
			yyDollar[3].node.Group = ast.NodeGroupRight

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeBinaryCoalesce,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:5512
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5518
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCast, []scanner.Token{*yyDollar[1].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeCastInt,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5538
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCast, []scanner.Token{*yyDollar[1].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeCastDouble,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5558
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCast, []scanner.Token{*yyDollar[1].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeCastString,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5578
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCast, []scanner.Token{*yyDollar[1].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeCastArray,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5598
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCast, []scanner.Token{*yyDollar[1].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeCastObject,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5618
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCast, []scanner.Token{*yyDollar[1].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeCastBool,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5638
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupCast, []scanner.Token{*yyDollar[1].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeCastUnset,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5658
		{
			var children []ast.Node

			if yyDollar[2].node.Type != ast.NodeTypeNil {
				yyDollar[2].node.Group = ast.NodeGroupExpr
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(yyDollar[2].node),
				)
			}

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			var flag ast.NodeFlag
			exitTknValue := yylex.(*Parser).FileData[yyDollar[1].token.StartPos:yyDollar[1].token.EndPos]
			if bytes.EqualFold(exitTknValue, []byte("die")) {
				flag = ast.NodeFlagAltSyntax
			}

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprExit,
				Flag:     flag,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5687
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprErrorSuppress,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:5706
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:5712
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupParts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprShellExec,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5729
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprPrint,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:5748
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprYield,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5760
		{
			yyDollar[2].node.Group = ast.NodeGroupVal

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprYield,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:5779
		{
			yyDollar[2].node.Group = ast.NodeGroupKey
			yyDollar[4].node.Group = ast.NodeGroupVal

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node, yyDollar[4].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[3].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprYield,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5800
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[1].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprYieldFrom,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 384:
		yyDollar = yyS[yypt-11 : yypt+1]
		// line internal/parser/php7/php7.y:5820
		{
			stmts := yylex.(*Parser).List.Pop(ast.NodeGroupStmts)
			params := yylex.(*Parser).List.Pop(ast.NodeGroupParams)
			nodes := make([]ast.Node, 0, 2)

			if yyDollar[7].node.Type != ast.NodeTypeNil {
				yyDollar[7].node.Group = ast.NodeGroupClosureUse
				nodes = append(nodes, yyDollar[7].node)
			}

			if yyDollar[8].node.Type != ast.NodeTypeNil {
				yyDollar[8].node.Group = ast.NodeGroupReturnType
				nodes = append(nodes, yyDollar[8].node)
			}

			children := yylex.(*Parser).Ast.AddNodes(
				params, nodes, stmts,
			)

			var flag ast.NodeFlag
			if yyDollar[2].token != nil {
				flag = flag | ast.NodeFlagRef
			}

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			if yyDollar[2].token == nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupFunction, yyDollar[4].token.HiddenTokens)
			} else {
				yylex.(*Parser).PushTokens(ast.TokenGroupFunction, yyDollar[2].token.HiddenTokens)
				yylex.(*Parser).PushTokens(ast.TokenGroupAmpersand, yyDollar[4].token.HiddenTokens)
			}
			yylex.(*Parser).PushTokens(ast.TokenGroupParameterList, yyDollar[6].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupReturnType, yyDollar[9].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[11].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprClosure,
				Flag:     flag,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[11].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 385:
		yyDollar = yyS[yypt-12 : yypt+1]
		// line internal/parser/php7/php7.y:5866
		{
			stmts := yylex.(*Parser).List.Pop(ast.NodeGroupStmts)
			params := yylex.(*Parser).List.Pop(ast.NodeGroupParams)
			nodes := make([]ast.Node, 0, 2)

			if yyDollar[8].node.Type != ast.NodeTypeNil {
				yyDollar[8].node.Group = ast.NodeGroupClosureUse
				nodes = append(nodes, yyDollar[8].node)
			}

			if yyDollar[9].node.Type != ast.NodeTypeNil {
				yyDollar[9].node.Group = ast.NodeGroupReturnType
				nodes = append(nodes, yyDollar[9].node)
			}

			children := yylex.(*Parser).Ast.AddNodes(
				params, nodes, stmts,
			)

			flag := ast.NodeFlagStatic
			if yyDollar[3].token != nil {
				flag = flag | ast.NodeFlagRef
			}

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStatic, yyDollar[2].token.HiddenTokens)
			if yyDollar[3].token == nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupFunction, yyDollar[5].token.HiddenTokens)
			} else {
				yylex.(*Parser).PushTokens(ast.TokenGroupFunction, yyDollar[3].token.HiddenTokens)
				yylex.(*Parser).PushTokens(ast.TokenGroupAmpersand, yyDollar[5].token.HiddenTokens)
			}
			yylex.(*Parser).PushTokens(ast.TokenGroupParameterList, yyDollar[7].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupReturnType, yyDollar[10].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStmts, yyDollar[12].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprClosure,
				Flag:     flag,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[12].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:5918
		{
			yyVAL.token = nil
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:5922
		{
			yyVAL.token = yyDollar[1].token
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:5929
		{
			yyVAL.node = ast.Node{}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:5935
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupStmts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupUse, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupLexicalVarList, yyDollar[4].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprClosureUse,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:5956
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:5957
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:5963
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:5972
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:6000
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)

			variableNode := ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVar,
			}

			// Reference

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(variableNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprReference,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVal,
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:6048
		{
			yyDollar[1].node.Group = ast.NodeGroupFunction
			yyDollar[2].node.Group = ast.NodeGroupArgumentList
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[2].node),
			)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprFunctionCall,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:6065
		{
			yyDollar[1].node.Group = ast.NodeGroupClass
			yyDollar[3].node.Group = ast.NodeGroupCall
			yyDollar[4].node.Group = ast.NodeGroupArgumentList
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node, yyDollar[4].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprStaticCall,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:6085
		{
			yyDollar[1].node.Group = ast.NodeGroupClass
			yyDollar[3].node.Group = ast.NodeGroupCall
			yyDollar[4].node.Group = ast.NodeGroupArgumentList
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node, yyDollar[4].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprStaticCall,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:6105
		{
			yyDollar[1].node.Group = ast.NodeGroupFunction
			yyDollar[2].node.Group = ast.NodeGroupArgumentList
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[2].node),
			)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprFunctionCall,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6125
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6137
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6146
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6152
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:6161
		{
			yyVAL.node = ast.Node{}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:6167
		{
			var children []ast.Node

			if yyDollar[2].node.Type != ast.NodeTypeNil {
				yyDollar[2].node.Group = ast.NodeGroupExpr
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(yyDollar[2].node),
				)
			}

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeWrapper,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:6195
		{
			yylex.(*Parser).List.Push()

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6201
		{
			stringPartNode := ast.Node{
				Type:     ast.NodeTypeScalarEncapsedStringPart,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Group:    ast.NodeGroupParts,
			}

			yylex.(*Parser).List.Push(stringPartNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6213
		{
			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:6220
		{
			yyVAL.node = ast.Node{}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6226
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:6235
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupItems),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupArray, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupArrayPairList, yyDollar[4].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprArray,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:6254
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupItems),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupArrayPairList, yyDollar[3].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprShortArray,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6272
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarString,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6287
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarLnumber,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6299
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarDnumber,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6311
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarMagicConstant,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6323
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarMagicConstant,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6335
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarMagicConstant,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6347
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarMagicConstant,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6359
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarMagicConstant,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6371
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarMagicConstant,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6383
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarMagicConstant,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6395
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarMagicConstant,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:6407
		{
			// String part

			stringPartNode := ast.Node{
				Type:     ast.NodeTypeScalarEncapsedStringPart,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, nil),
				Group:    ast.NodeGroupParts,
			}

			// HEREDOC

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(stringPartNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarHeredoc,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:6434
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarHeredoc,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[2].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:6446
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupParts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarEncapsed,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:6463
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupParts),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarHeredoc,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6480
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6486
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6495
		{
			yyDollar[1].node.Group = ast.NodeGroupConstant
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node),
			)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprConstFetch,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:6510
		{
			// Identifier

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupConstantName,
			}

			// Constant fetch

			yyDollar[1].node.Group = ast.NodeGroupClass
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprClassConstFetch,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:6541
		{
			// Identifier

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupConstantName,
			}

			// Constant fetch

			yyDollar[1].node.Group = ast.NodeGroupClass
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprClassConstFetch,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6575
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6581
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:6590
		{
			yyVAL.node = ast.Node{}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6596
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6605
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6614
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:6620
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeWrapper,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6642
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6651
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:6657
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeWrapper,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6679
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6688
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:6694
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupDim

			var children []ast.Node
			if yyDollar[3].node.Type == ast.NodeTypeNil {
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(yyDollar[1].node),
				)
			} else {
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
				)
			}

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, []scanner.Token{*yyDollar[2].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, []scanner.Token{*yyDollar[4].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprArrayDimFetch,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:6724
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupDim

			var children []ast.Node
			if yyDollar[3].node.Type == ast.NodeTypeNil {
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(yyDollar[1].node),
				)
			} else {
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
				)
			}

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, []scanner.Token{*yyDollar[2].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, []scanner.Token{*yyDollar[4].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprArrayDimFetch,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:6754
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupDim

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, []scanner.Token{*yyDollar[2].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, []scanner.Token{*yyDollar[4].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprArrayDimFetch,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:6777
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupMethod
			yyDollar[4].node.Group = ast.NodeGroupArgumentList

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node, yyDollar[4].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprMethodCall,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6798
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6807
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6813
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:6819
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupProperty

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprPropertyFetch,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6842
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:6870
		{
			yyDollar[3].node.Group = ast.NodeGroupVarName
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[2].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, []scanner.Token{*yyDollar[4].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:6893
		{
			yyDollar[2].node.Group = ast.NodeGroupVarName
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[1].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:6915
		{
			yyDollar[1].node.Group = ast.NodeGroupClass
			yyDollar[3].node.Group = ast.NodeGroupProperty
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprStaticPropertyFetch,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:6934
		{
			yyDollar[1].node.Group = ast.NodeGroupClass
			yyDollar[3].node.Group = ast.NodeGroupProperty
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprStaticPropertyFetch,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:6956
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:6962
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupDim

			var children []ast.Node
			if yyDollar[3].node.Type == ast.NodeTypeNil {
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(yyDollar[1].node),
				)
			} else {
				children = yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
				)
			}

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, []scanner.Token{*yyDollar[2].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, []scanner.Token{*yyDollar[4].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprArrayDimFetch,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:6992
		{
			yyDollar[1].node.Group = ast.NodeGroupVar
			yyDollar[3].node.Group = ast.NodeGroupDim

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, []scanner.Token{*yyDollar[2].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, []scanner.Token{*yyDollar[4].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprArrayDimFetch,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:7015
		{
			yyDollar[1].node.Group = ast.NodeGroupClass
			yyDollar[3].node.Group = ast.NodeGroupProperty

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprPropertyFetch,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:7035
		{
			yyDollar[1].node.Group = ast.NodeGroupClass
			yyDollar[3].node.Group = ast.NodeGroupProperty
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprStaticPropertyFetch,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:7054
		{
			yyDollar[1].node.Group = ast.NodeGroupClass
			yyDollar[3].node.Group = ast.NodeGroupProperty
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupName, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprStaticPropertyFetch,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7076
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:7088
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeWrapper,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7110
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7119
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:7131
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeWrapper,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7153
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7162
		{
			items := yylex.(*Parser).List.Pop(ast.NodeGroupItems)

			if len(items) == 1 && items[0].Position.PS == 0 && items[0].Position.PE == 0 {
				yylex.(*Parser).List.Push()
			} else {
				yylex.(*Parser).List.Push(items...)
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		// line internal/parser/php7/php7.y:7177
		{
			yyVAL.node = ast.Node{
				Type:   ast.NodeTypeExprArrayItem,
				Tokens: yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7186
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:7194
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:7195
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7201
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:7210
		{
			yyDollar[1].node.Group = ast.NodeGroupKey
			yyDollar[3].node.Group = ast.NodeGroupVal

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprArrayItem,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7230
		{
			yyDollar[1].node.Group = ast.NodeGroupVal

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node),
			)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprArrayItem,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:7247
		{
			// Reference

			yyDollar[4].node.Group = ast.NodeGroupVar

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[4].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)

			refNode := ast.Node{
				Type:     ast.NodeTypeExprReference,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVal,
			}

			// Array item

			yyDollar[1].node.Group = ast.NodeGroupKey

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, refNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprArrayItem,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:7286
		{
			yyDollar[2].node.Group = ast.NodeGroupVar

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			refNode := ast.Node{
				Type:     ast.NodeTypeExprReference,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVal,
			}

			// Array item

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(refNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprArrayItem,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
		// line internal/parser/php7/php7.y:7319
		{
			// List

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupItems),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupList, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupArrayPairList, yyDollar[6].token.HiddenTokens)

			listNode := ast.Node{
				Type:     ast.NodeTypeExprList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token, yyDollar[6].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVal,
			}

			// Array item

			yyDollar[1].node.Group = ast.NodeGroupKey

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[1].node, listNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprArrayItem,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[6].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:7358
		{
			// List

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupItems),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupList, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupArrayPairList, yyDollar[4].token.HiddenTokens)

			listNode := ast.Node{
				Type:     ast.NodeTypeExprList,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVal,
			}

			// Array item
			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(listNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprArrayItem,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:7396
		{
			yylex.(*Parser).List.Add(yyDollar[2].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:7402
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)

			encapsNode := ast.Node{
				Type:     ast.NodeTypeScalarEncapsedStringPart,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Add(encapsNode)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7416
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:7422
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			encapsNode := ast.Node{
				Type:     ast.NodeTypeScalarEncapsedStringPart,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).List.Push(encapsNode, yyDollar[2].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7439
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:7467
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			variableNode := ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVar,
			}

			// Fetch

			yyDollar[3].node.Group = ast.NodeGroupDim

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(variableNode, yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, []scanner.Token{*yyDollar[2].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, []scanner.Token{*yyDollar[4].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprArrayDimFetch,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:7516
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			variableNode := ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVar,
			}

			// Property

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[3].token.HiddenTokens)

			propertyNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[3].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupProperty,
			}

			// Fetch

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(variableNode, propertyNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[2].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprPropertyFetch,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:7571
		{
			// Variable

			yyDollar[2].node.Group = ast.NodeGroupVarName

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			variableNode := ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Group:    ast.NodeGroupExpr,
			}

			// Wrapper

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(variableNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeWrapper,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:7608
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, nil),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)

			variableNode := ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupExpr,
			}

			// Wrapper

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(variableNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeWrapper,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 491:
		yyDollar = yyS[yypt-6 : yypt+1]
		// line internal/parser/php7/php7.y:7654
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[2].token.HiddenTokens)

			variableNode := ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVar,
			}

			// Fetch

			yyDollar[4].node.Group = ast.NodeGroupDim

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(variableNode, yyDollar[4].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, []scanner.Token{*yyDollar[3].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[5].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, []scanner.Token{*yyDollar[5].token})

			fetchNode := ast.Node{
				Type:     ast.NodeTypeExprArrayDimFetch,
				Position: yylex.(*Parser).NewPosition(children, []*scanner.Token{yyDollar[5].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupExpr,
			}

			// Wrapper

			children = yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(fetchNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[6].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, []scanner.Token{*yyDollar[6].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeWrapper,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[6].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		// line internal/parser/php7/php7.y:7722
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupStart, []scanner.Token{*yyDollar[1].token})
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, yyDollar[3].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEnd, []scanner.Token{*yyDollar[3].token})

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeWrapper,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[3].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7747
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeScalarString,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7759
		{
			nodeType := ast.NodeTypeScalarString
			tknValue := yylex.(*Parser).FileData[yyDollar[1].token.StartPos:yyDollar[1].token.EndPos]
			if _, err := strconv.Atoi(string(tknValue)); err == nil {
				nodeType = ast.NodeTypeScalarLnumber
			}

			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     nodeType,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:7777
		{
			yylex.(*Parser).PushTokens(ast.TokenGroupVar, yyDollar[1].token.HiddenTokens)

			tknValue := yylex.(*Parser).FileData[yyDollar[2].token.StartPos:yyDollar[2].token.EndPos]
			if _, err := strconv.Atoi(string(tknValue)); err == nil {
				lnumberNode := ast.Node{
					Type:     ast.NodeTypeScalarLnumber,
					Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[2].token}, nil),
					Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
					Group:    ast.NodeGroupExpr,
				}

				children := yylex.(*Parser).Ast.AddNodes(
					yylex.(*Parser).Nodes(lnumberNode),
				)

				yyVAL.node = ast.Node{
					Type:     ast.NodeTypeExprUnaryMinus,
					Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[2].token}, nil),
					Children: children,
					Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				}
			} else {
				yyVAL.node = ast.Node{
					Type:     ast.NodeTypeScalarString,
					Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[2].token}, nil),
					Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				}
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7810
		{
			// Identifier

			identifierNode := ast.Node{
				Type:     ast.NodeTypeIdentifier,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, nil),
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
				Group:    ast.NodeGroupVarName,
			}

			// Variable

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(identifierNode),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprVariable,
				Position: yylex.(*Parser).NewPosition(children, nil, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 497:
		yyDollar = yyS[yypt-5 : yypt+1]
		// line internal/parser/php7/php7.y:7841
		{
			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).List.Pop(ast.NodeGroupVars),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupIsset, yyDollar[2].token.HiddenTokens)
			if yyDollar[4].token != nil {
				yylex.(*Parser).PushTokens(ast.TokenGroupVarList, yyDollar[4].token.HiddenTokens)
				yylex.(*Parser).PushTokens(ast.TokenGroupVarList, []scanner.Token{*yyDollar[4].token})
			}

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprIsset,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[5].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:7863
		{
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEmpty, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprEmpty,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:7884
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprInclude,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:7903
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprIncludeOnce,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:7922
		{
			yyDollar[3].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[3].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupEval, yyDollar[2].token.HiddenTokens)
			yylex.(*Parser).PushTokens(ast.TokenGroupExpr, yyDollar[4].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprEval,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token, yyDollar[4].token}, nil),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:7943
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprRequire,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:7962
		{
			yyDollar[2].node.Group = ast.NodeGroupExpr

			children := yylex.(*Parser).Ast.AddNodes(
				yylex.(*Parser).Nodes(yyDollar[2].node),
			)

			yylex.(*Parser).PushTokens(ast.TokenGroupStart, yyDollar[1].token.HiddenTokens)

			yyVAL.node = ast.Node{
				Type:     ast.NodeTypeExprRequireOnce,
				Position: yylex.(*Parser).NewPosition(nil, []*scanner.Token{yyDollar[1].token}, children),
				Children: children,
				Tokens:   yylex.(*Parser).Ast.AddTokens(yylex.(*Parser).PopTokens()),
			}

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7984
		{
			yylex.(*Parser).List.Push(yyDollar[1].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		// line internal/parser/php7/php7.y:7989
		{
			yylex.(*Parser).PrependToken(yyDollar[2].token)
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
		// line internal/parser/php7/php7.y:7990
		{
			yylex.(*Parser).List.Add(yyDollar[4].node)

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		// line internal/parser/php7/php7.y:7999
		{
			yyVAL.node = yyDollar[1].node

			yylex.(*Parser).returnTokenToPool(yyDollar, &yyVAL)
		}
	}
	goto yystack /* stack new state and value */
}
