// Code generated by "stringer -type=NodeType -trimprefix=NodeType -output ./nodetype_string.go"; DO NOT EDIT.

package ast

import "strconv"

const _NodeType_name = "RootParameterArgumentArgumentListNullableIdentifierScalarHeredocScalarEncapsedScalarEncapsedStringPartScalarDnumberScalarMagicConstantScalarLnumberScalarStringNameNameNameFullyQualifiedNameRelativeNameNamePartStmtFinallyStmtNopStmtUnsetStmtStaticStmtPropertyStmtGroupUseStmtAltElseIfStmtElseStmtCaseStmtConstListStmtExpressionStmtReturnStmtAltForeachStmtForStmtClassConstListStmtInterfaceStmtEchoStmtInterfaceExtendsStmtTraitStmtContinueStmtClassExtendsStmtUseListStmtTraitUseStmtTraitUsePrecedenceStmtTryStmtDeclareStmtDefaultStmtForeachStmtTraitAdaptationListStmtGlobalStmtWhileStmtIfStmtAltElseStmtGotoStmtClassStmtLabelStmtThrowStmtClassImplementsStmtUseStmtPropertyListStmtAltWhileStmtAltIfStmtCatchStmtConstantStmtTraitUseAliasStmtNamespaceStmtSwitchStmtBreakStmtClassMethodStmtFunctionStmtAltSwitchStmtHaltCompilerStmtTraitMethodRefStmtDoStmtStaticVarStmtCaseListStmtElseIfStmtAltForStmtStmtListStmtReturnTypeStmtInlineHtmlExprInstanceOfExprBooleanNotExprNewExprClosureUseExprPreDecExprEmptyExprErrorSuppressExprEvalExprIssetExprClassConstFetchExprExitExprShortListExprIncludeOnceExprPostIncExprConstFetchExprTernaryExprVariableExprRequireOnceExprPostDecExprBitwiseNotExprIncludeExprListExprShellExecExprMethodCallExprReferenceExprPrintExprUnaryPlusExprPropertyFetchExprArrayExprStaticPropertyFetchExprUnaryMinusExprRequireExprShortArrayExprPreIncExprYieldFromExprYieldExprCloneExprStaticCallExprClosureExprArrayDimFetchExprArrayItemExprFunctionCallAssignAssignAssignMulAssignMinusAssignShiftLeftAssignModAssignPowAssignBitwiseXorAssignConcatAssignDivAssignPlusAssignReferenceAssignBitwiseAndAssignBitwiseOrAssignShiftRightBinaryBooleanOrBinaryMulBinaryMinusBinaryEqualBinaryIdenticalBinaryLogicalXorBinaryCoalesceBinaryBooleanAndBinarySmallerBinarySmallerOrEqualBinaryShiftLeftBinaryModBinaryGreaterOrEqualBinaryLogicalAndBinaryLogicalOrBinaryPowBinaryBitwiseXorBinaryConcatBinaryDivBinaryPlusBinaryGreaterBinaryBitwiseAndBinaryBitwiseOrBinarySpaceshipBinaryShiftRightBinaryNotIdenticalBinaryNotEqualCastUnsetCastDoubleCastStringCastBoolCastArrayCastIntCastObject"

var _NodeType_map = map[NodeType]string{
	0:     _NodeType_name[0:4],
	1:     _NodeType_name[4:13],
	2:     _NodeType_name[13:21],
	3:     _NodeType_name[21:33],
	4:     _NodeType_name[33:41],
	261:   _NodeType_name[41:51],
	527:   _NodeType_name[51:64],
	528:   _NodeType_name[64:78],
	778:   _NodeType_name[78:102],
	779:   _NodeType_name[102:115],
	780:   _NodeType_name[115:134],
	781:   _NodeType_name[134:147],
	782:   _NodeType_name[147:159],
	1031:  _NodeType_name[159:167],
	1032:  _NodeType_name[167:185],
	1033:  _NodeType_name[185:197],
	1286:  _NodeType_name[197:209],
	2066:  _NodeType_name[209:220],
	2067:  _NodeType_name[220:227],
	2068:  _NodeType_name[227:236],
	2069:  _NodeType_name[236:246],
	2070:  _NodeType_name[246:258],
	2071:  _NodeType_name[258:270],
	2072:  _NodeType_name[270:283],
	2073:  _NodeType_name[283:291],
	2074:  _NodeType_name[291:299],
	2075:  _NodeType_name[299:312],
	2076:  _NodeType_name[312:326],
	2077:  _NodeType_name[326:336],
	2078:  _NodeType_name[336:350],
	2079:  _NodeType_name[350:357],
	2080:  _NodeType_name[357:375],
	2081:  _NodeType_name[375:388],
	2082:  _NodeType_name[388:396],
	2083:  _NodeType_name[396:416],
	2084:  _NodeType_name[416:425],
	2085:  _NodeType_name[425:437],
	2086:  _NodeType_name[437:453],
	2087:  _NodeType_name[453:464],
	2088:  _NodeType_name[464:476],
	2089:  _NodeType_name[476:498],
	2090:  _NodeType_name[498:505],
	2091:  _NodeType_name[505:516],
	2092:  _NodeType_name[516:527],
	2093:  _NodeType_name[527:538],
	2094:  _NodeType_name[538:561],
	2095:  _NodeType_name[561:571],
	2096:  _NodeType_name[571:580],
	2097:  _NodeType_name[580:586],
	2098:  _NodeType_name[586:597],
	2099:  _NodeType_name[597:605],
	2100:  _NodeType_name[605:614],
	2101:  _NodeType_name[614:623],
	2102:  _NodeType_name[623:632],
	2103:  _NodeType_name[632:651],
	2104:  _NodeType_name[651:658],
	2105:  _NodeType_name[658:674],
	2106:  _NodeType_name[674:686],
	2107:  _NodeType_name[686:695],
	2108:  _NodeType_name[695:704],
	2109:  _NodeType_name[704:716],
	2110:  _NodeType_name[716:733],
	2111:  _NodeType_name[733:746],
	2112:  _NodeType_name[746:756],
	2113:  _NodeType_name[756:765],
	2114:  _NodeType_name[765:780],
	2115:  _NodeType_name[780:792],
	2116:  _NodeType_name[792:805],
	2117:  _NodeType_name[805:821],
	2118:  _NodeType_name[821:839],
	2119:  _NodeType_name[839:845],
	2120:  _NodeType_name[845:858],
	2121:  _NodeType_name[858:870],
	2122:  _NodeType_name[870:880],
	2123:  _NodeType_name[880:890],
	2124:  _NodeType_name[890:902],
	2125:  _NodeType_name[902:916],
	2321:  _NodeType_name[916:930],
	4174:  _NodeType_name[930:944],
	4175:  _NodeType_name[944:958],
	4176:  _NodeType_name[958:965],
	4177:  _NodeType_name[965:979],
	4178:  _NodeType_name[979:989],
	4179:  _NodeType_name[989:998],
	4180:  _NodeType_name[998:1015],
	4181:  _NodeType_name[1015:1023],
	4182:  _NodeType_name[1023:1032],
	4183:  _NodeType_name[1032:1051],
	4184:  _NodeType_name[1051:1059],
	4185:  _NodeType_name[1059:1072],
	4186:  _NodeType_name[1072:1087],
	4187:  _NodeType_name[1087:1098],
	4188:  _NodeType_name[1098:1112],
	4189:  _NodeType_name[1112:1123],
	4190:  _NodeType_name[1123:1135],
	4191:  _NodeType_name[1135:1150],
	4192:  _NodeType_name[1150:1161],
	4193:  _NodeType_name[1161:1175],
	4194:  _NodeType_name[1175:1186],
	4195:  _NodeType_name[1186:1194],
	4196:  _NodeType_name[1194:1207],
	4197:  _NodeType_name[1207:1221],
	4198:  _NodeType_name[1221:1234],
	4199:  _NodeType_name[1234:1243],
	4200:  _NodeType_name[1243:1256],
	4201:  _NodeType_name[1256:1273],
	4202:  _NodeType_name[1273:1282],
	4203:  _NodeType_name[1282:1305],
	4204:  _NodeType_name[1305:1319],
	4205:  _NodeType_name[1319:1330],
	4206:  _NodeType_name[1330:1344],
	4207:  _NodeType_name[1344:1354],
	4208:  _NodeType_name[1354:1367],
	4209:  _NodeType_name[1367:1376],
	4210:  _NodeType_name[1376:1385],
	4211:  _NodeType_name[1385:1399],
	4212:  _NodeType_name[1399:1410],
	4213:  _NodeType_name[1410:1427],
	4214:  _NodeType_name[1427:1440],
	4215:  _NodeType_name[1440:1456],
	12415: _NodeType_name[1456:1468],
	12416: _NodeType_name[1468:1477],
	12417: _NodeType_name[1477:1488],
	12418: _NodeType_name[1488:1503],
	12419: _NodeType_name[1503:1512],
	12420: _NodeType_name[1512:1521],
	12421: _NodeType_name[1521:1537],
	12422: _NodeType_name[1537:1549],
	12423: _NodeType_name[1549:1558],
	12424: _NodeType_name[1558:1568],
	12425: _NodeType_name[1568:1583],
	12426: _NodeType_name[1583:1599],
	12427: _NodeType_name[1599:1614],
	12428: _NodeType_name[1614:1630],
	20621: _NodeType_name[1630:1645],
	20622: _NodeType_name[1645:1654],
	20623: _NodeType_name[1654:1665],
	20624: _NodeType_name[1665:1676],
	20625: _NodeType_name[1676:1691],
	20626: _NodeType_name[1691:1707],
	20627: _NodeType_name[1707:1721],
	20628: _NodeType_name[1721:1737],
	20629: _NodeType_name[1737:1750],
	20630: _NodeType_name[1750:1770],
	20631: _NodeType_name[1770:1785],
	20632: _NodeType_name[1785:1794],
	20633: _NodeType_name[1794:1814],
	20634: _NodeType_name[1814:1830],
	20635: _NodeType_name[1830:1845],
	20636: _NodeType_name[1845:1854],
	20637: _NodeType_name[1854:1870],
	20638: _NodeType_name[1870:1882],
	20639: _NodeType_name[1882:1891],
	20640: _NodeType_name[1891:1901],
	20641: _NodeType_name[1901:1914],
	20642: _NodeType_name[1914:1930],
	20643: _NodeType_name[1930:1945],
	20644: _NodeType_name[1945:1960],
	20645: _NodeType_name[1960:1976],
	20646: _NodeType_name[1976:1994],
	20647: _NodeType_name[1994:2008],
	36984: _NodeType_name[2008:2017],
	36985: _NodeType_name[2017:2027],
	36986: _NodeType_name[2027:2037],
	36987: _NodeType_name[2037:2045],
	36988: _NodeType_name[2045:2054],
	36989: _NodeType_name[2054:2061],
	36990: _NodeType_name[2061:2071],
}

func (i NodeType) String() string {
	if str, ok := _NodeType_map[i]; ok {
		return str
	}
	return "NodeType(" + strconv.FormatInt(int64(i), 10) + ")"
}
