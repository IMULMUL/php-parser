// Code generated by "stringer -type=NodeGroup -trimprefix=NodeGroup -output ./nodegroup_string.go"; DO NOT EDIT.

package ast

import "strconv"

const (
	_NodeGroup_name_0 = "NilExprVarTypeVarDefaultValueStmtElseIfMethodNameReturnTypeClassNameExtendsImplementsConstantNameKeyFunctionNameLabelUseTypePrefixInterfaceNameLabelNameNamespaceNameCaseListTraitMethodRefModifierAliasTraitAdaptationListTraitNameFinallyUseLeftRightDimValClassClosureUseConstantFunctionPropertyCallIfTrueIfFalseVarName"
	_NodeGroup_name_1 = "StmtsPartsUsesConstsUseListLoopCondInitVarsExprsCatchesTypesParamsModifiersInterfaceNamesItemsCasesArgumentsPropertiesTraitsAdaptationsInsteadofArgumentListElse"
)

var (
	_NodeGroup_index_0 = [...]uint16{0, 3, 7, 14, 17, 29, 33, 39, 49, 59, 68, 75, 85, 97, 100, 112, 117, 124, 130, 143, 152, 165, 173, 178, 184, 187, 195, 200, 219, 228, 235, 238, 242, 247, 250, 253, 258, 268, 276, 284, 292, 296, 302, 309, 316}
	_NodeGroup_index_1 = [...]uint8{0, 5, 10, 14, 20, 27, 31, 35, 39, 43, 48, 55, 60, 66, 75, 89, 94, 99, 108, 118, 124, 135, 144, 156, 160}
)

func (i NodeGroup) String() string {
	switch {
	case 0 <= i && i <= 43:
		return _NodeGroup_name_0[_NodeGroup_index_0[i]:_NodeGroup_index_0[i+1]]
	case 172 <= i && i <= 195:
		i -= 172
		return _NodeGroup_name_1[_NodeGroup_index_1[i]:_NodeGroup_index_1[i+1]]
	default:
		return "NodeGroup(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
