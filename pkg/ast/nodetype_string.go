// Code generated by "stringer -type=NodeType -trimprefix=NodeType -output ./nodetype_string.go"; DO NOT EDIT.

package ast

import "strconv"

const _NodeType_name = "NilRootWrapperParameterArgumentArgumentListNullableIdentifierScalarHeredocScalarEncapsedScalarEncapsedStringPartScalarDnumberScalarMagicConstantScalarLnumberScalarStringNameNameNameFullyQualifiedNameRelativeNameNamePartStmtFinallyStmtNopStmtUnsetStmtStaticStmtPropertyStmtGroupUseStmtAltElseIfStmtElseStmtCaseStmtConstListStmtExpressionStmtReturnStmtAltForeachStmtForStmtClassConstListStmtInterfaceStmtEchoStmtInterfaceExtendsStmtTraitStmtContinueStmtClassExtendsStmtUseListStmtTraitUseStmtTraitUsePrecedenceStmtTryStmtDeclareStmtDefaultStmtForeachStmtTraitAdaptationListStmtGlobalStmtWhileStmtIfStmtAltElseStmtGotoStmtClassStmtLabelStmtThrowStmtClassImplementsStmtUseStmtPropertyListStmtAltWhileStmtAltIfStmtCatchStmtConstantStmtTraitUseAliasStmtNamespaceStmtSwitchStmtBreakStmtClassMethodStmtFunctionStmtAltSwitchStmtHaltCompilerStmtTraitMethodRefStmtDoStmtStaticVarStmtCaseListStmtElseIfStmtAltForStmtStmtListStmtReturnTypeStmtInlineHtmlExprInstanceOfExprBooleanNotExprNewExprClosureUseExprPreDecExprEmptyExprErrorSuppressExprEvalExprIssetExprClassConstFetchExprExitExprShortListExprIncludeOnceExprPostIncExprConstFetchExprTernaryExprVariableExprRequireOnceExprPostDecExprBitwiseNotExprIncludeExprListExprShellExecExprMethodCallExprReferenceExprPrintExprUnaryPlusExprPropertyFetchExprArrayExprStaticPropertyFetchExprUnaryMinusExprRequireExprShortArrayExprPreIncExprYieldFromExprYieldExprCloneExprStaticCallExprClosureExprArrayDimFetchExprArrayItemExprFunctionCallAssignAssignAssignMulAssignMinusAssignShiftLeftAssignModAssignPowAssignBitwiseXorAssignConcatAssignDivAssignPlusAssignReferenceAssignBitwiseAndAssignBitwiseOrAssignShiftRightBinaryBooleanOrBinaryMulBinaryMinusBinaryEqualBinaryIdenticalBinaryLogicalXorBinaryCoalesceBinaryBooleanAndBinarySmallerBinarySmallerOrEqualBinaryShiftLeftBinaryModBinaryGreaterOrEqualBinaryLogicalAndBinaryLogicalOrBinaryPowBinaryBitwiseXorBinaryConcatBinaryDivBinaryPlusBinaryGreaterBinaryBitwiseAndBinaryBitwiseOrBinarySpaceshipBinaryShiftRightBinaryNotIdenticalBinaryNotEqualCastUnsetCastDoubleCastStringCastBoolCastArrayCastIntCastObject"

var _NodeType_map = map[NodeType]string{
	0:     _NodeType_name[0:3],
	1:     _NodeType_name[3:7],
	2:     _NodeType_name[7:14],
	3:     _NodeType_name[14:23],
	4:     _NodeType_name[23:31],
	5:     _NodeType_name[31:43],
	6:     _NodeType_name[43:51],
	263:   _NodeType_name[51:61],
	529:   _NodeType_name[61:74],
	530:   _NodeType_name[74:88],
	780:   _NodeType_name[88:112],
	781:   _NodeType_name[112:125],
	782:   _NodeType_name[125:144],
	783:   _NodeType_name[144:157],
	784:   _NodeType_name[157:169],
	1033:  _NodeType_name[169:177],
	1034:  _NodeType_name[177:195],
	1035:  _NodeType_name[195:207],
	1288:  _NodeType_name[207:219],
	2068:  _NodeType_name[219:230],
	2069:  _NodeType_name[230:237],
	2070:  _NodeType_name[237:246],
	2071:  _NodeType_name[246:256],
	2072:  _NodeType_name[256:268],
	2073:  _NodeType_name[268:280],
	2074:  _NodeType_name[280:293],
	2075:  _NodeType_name[293:301],
	2076:  _NodeType_name[301:309],
	2077:  _NodeType_name[309:322],
	2078:  _NodeType_name[322:336],
	2079:  _NodeType_name[336:346],
	2080:  _NodeType_name[346:360],
	2081:  _NodeType_name[360:367],
	2082:  _NodeType_name[367:385],
	2083:  _NodeType_name[385:398],
	2084:  _NodeType_name[398:406],
	2085:  _NodeType_name[406:426],
	2086:  _NodeType_name[426:435],
	2087:  _NodeType_name[435:447],
	2088:  _NodeType_name[447:463],
	2089:  _NodeType_name[463:474],
	2090:  _NodeType_name[474:486],
	2091:  _NodeType_name[486:508],
	2092:  _NodeType_name[508:515],
	2093:  _NodeType_name[515:526],
	2094:  _NodeType_name[526:537],
	2095:  _NodeType_name[537:548],
	2096:  _NodeType_name[548:571],
	2097:  _NodeType_name[571:581],
	2098:  _NodeType_name[581:590],
	2099:  _NodeType_name[590:596],
	2100:  _NodeType_name[596:607],
	2101:  _NodeType_name[607:615],
	2102:  _NodeType_name[615:624],
	2103:  _NodeType_name[624:633],
	2104:  _NodeType_name[633:642],
	2105:  _NodeType_name[642:661],
	2106:  _NodeType_name[661:668],
	2107:  _NodeType_name[668:684],
	2108:  _NodeType_name[684:696],
	2109:  _NodeType_name[696:705],
	2110:  _NodeType_name[705:714],
	2111:  _NodeType_name[714:726],
	2112:  _NodeType_name[726:743],
	2113:  _NodeType_name[743:756],
	2114:  _NodeType_name[756:766],
	2115:  _NodeType_name[766:775],
	2116:  _NodeType_name[775:790],
	2117:  _NodeType_name[790:802],
	2118:  _NodeType_name[802:815],
	2119:  _NodeType_name[815:831],
	2120:  _NodeType_name[831:849],
	2121:  _NodeType_name[849:855],
	2122:  _NodeType_name[855:868],
	2123:  _NodeType_name[868:880],
	2124:  _NodeType_name[880:890],
	2125:  _NodeType_name[890:900],
	2126:  _NodeType_name[900:912],
	2127:  _NodeType_name[912:926],
	2323:  _NodeType_name[926:940],
	4176:  _NodeType_name[940:954],
	4177:  _NodeType_name[954:968],
	4178:  _NodeType_name[968:975],
	4179:  _NodeType_name[975:989],
	4180:  _NodeType_name[989:999],
	4181:  _NodeType_name[999:1008],
	4182:  _NodeType_name[1008:1025],
	4183:  _NodeType_name[1025:1033],
	4184:  _NodeType_name[1033:1042],
	4185:  _NodeType_name[1042:1061],
	4186:  _NodeType_name[1061:1069],
	4187:  _NodeType_name[1069:1082],
	4188:  _NodeType_name[1082:1097],
	4189:  _NodeType_name[1097:1108],
	4190:  _NodeType_name[1108:1122],
	4191:  _NodeType_name[1122:1133],
	4192:  _NodeType_name[1133:1145],
	4193:  _NodeType_name[1145:1160],
	4194:  _NodeType_name[1160:1171],
	4195:  _NodeType_name[1171:1185],
	4196:  _NodeType_name[1185:1196],
	4197:  _NodeType_name[1196:1204],
	4198:  _NodeType_name[1204:1217],
	4199:  _NodeType_name[1217:1231],
	4200:  _NodeType_name[1231:1244],
	4201:  _NodeType_name[1244:1253],
	4202:  _NodeType_name[1253:1266],
	4203:  _NodeType_name[1266:1283],
	4204:  _NodeType_name[1283:1292],
	4205:  _NodeType_name[1292:1315],
	4206:  _NodeType_name[1315:1329],
	4207:  _NodeType_name[1329:1340],
	4208:  _NodeType_name[1340:1354],
	4209:  _NodeType_name[1354:1364],
	4210:  _NodeType_name[1364:1377],
	4211:  _NodeType_name[1377:1386],
	4212:  _NodeType_name[1386:1395],
	4213:  _NodeType_name[1395:1409],
	4214:  _NodeType_name[1409:1420],
	4215:  _NodeType_name[1420:1437],
	4216:  _NodeType_name[1437:1450],
	4217:  _NodeType_name[1450:1466],
	12417: _NodeType_name[1466:1478],
	12418: _NodeType_name[1478:1487],
	12419: _NodeType_name[1487:1498],
	12420: _NodeType_name[1498:1513],
	12421: _NodeType_name[1513:1522],
	12422: _NodeType_name[1522:1531],
	12423: _NodeType_name[1531:1547],
	12424: _NodeType_name[1547:1559],
	12425: _NodeType_name[1559:1568],
	12426: _NodeType_name[1568:1578],
	12427: _NodeType_name[1578:1593],
	12428: _NodeType_name[1593:1609],
	12429: _NodeType_name[1609:1624],
	12430: _NodeType_name[1624:1640],
	20623: _NodeType_name[1640:1655],
	20624: _NodeType_name[1655:1664],
	20625: _NodeType_name[1664:1675],
	20626: _NodeType_name[1675:1686],
	20627: _NodeType_name[1686:1701],
	20628: _NodeType_name[1701:1717],
	20629: _NodeType_name[1717:1731],
	20630: _NodeType_name[1731:1747],
	20631: _NodeType_name[1747:1760],
	20632: _NodeType_name[1760:1780],
	20633: _NodeType_name[1780:1795],
	20634: _NodeType_name[1795:1804],
	20635: _NodeType_name[1804:1824],
	20636: _NodeType_name[1824:1840],
	20637: _NodeType_name[1840:1855],
	20638: _NodeType_name[1855:1864],
	20639: _NodeType_name[1864:1880],
	20640: _NodeType_name[1880:1892],
	20641: _NodeType_name[1892:1901],
	20642: _NodeType_name[1901:1911],
	20643: _NodeType_name[1911:1924],
	20644: _NodeType_name[1924:1940],
	20645: _NodeType_name[1940:1955],
	20646: _NodeType_name[1955:1970],
	20647: _NodeType_name[1970:1986],
	20648: _NodeType_name[1986:2004],
	20649: _NodeType_name[2004:2018],
	36986: _NodeType_name[2018:2027],
	36987: _NodeType_name[2027:2037],
	36988: _NodeType_name[2037:2047],
	36989: _NodeType_name[2047:2055],
	36990: _NodeType_name[2055:2064],
	36991: _NodeType_name[2064:2071],
	36992: _NodeType_name[2071:2081],
}

func (i NodeType) String() string {
	if str, ok := _NodeType_map[i]; ok {
		return str
	}
	return "NodeType(" + strconv.FormatInt(int64(i), 10) + ")"
}
